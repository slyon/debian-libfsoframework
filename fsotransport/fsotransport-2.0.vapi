/* fsotransport-2.0.vapi generated by valac 0.16.0, do not modify. */

namespace FsoFramework {
	[CCode (cheader_filename = "fsotransport.h")]
	public abstract class AbstractCommandHandler {
		public GLib.SourceFunc? callback;
		public uint retry;
		public uint timeout;
		public AbstractCommandHandler ();
		public abstract string to_string ();
		public abstract void writeToTransport (FsoFramework.Transport t);
	}
	[CCode (cheader_filename = "fsotransport.h")]
	public abstract class AbstractCommandQueue : FsoFramework.CommandQueue, GLib.Object {
		protected FsoFramework.AbstractCommandHandler current;
		protected FsoFramework.CommandQueue.UnsolicitedHandler urchandler;
		public AbstractCommandQueue (FsoFramework.Transport transport);
		protected bool checkRestartingQ ();
		public virtual async void close ();
		protected void enqueueCommand (FsoFramework.AbstractCommandHandler command);
		public virtual async void freeze (bool drain = false);
		protected bool is_busy ();
		protected void onHupFromTransport ();
		protected abstract void onReadFromTransport (FsoFramework.Transport t);
		protected virtual void onResponseTimeout (FsoFramework.AbstractCommandHandler ach);
		protected bool onTimeout ();
		public virtual async bool open ();
		protected void reset ();
		protected void resetTimeout ();
		public virtual async void thaw ();
		protected void writeNextCommand ();
		public signal void hangup ();
	}
	[CCode (cheader_filename = "fsotransport.h")]
	public class BaseParser : FsoFramework.Parser, GLib.Object {
		protected FsoFramework.Parser.ExpectedPrefixFunc expectedPrefix;
		protected FsoFramework.Parser.HaveCommandFunc haveCommand;
		protected FsoFramework.Parser.SolicitedCompletedFunc solicitedCompleted;
		protected FsoFramework.Parser.UnsolicitedCompletedFunc unsolicitedCompleted;
		public BaseParser ();
		public virtual int feed (void* data, int len);
	}
	[CCode (cheader_filename = "fsotransport.h")]
	public class BaseTransport : FsoFramework.Transport {
		protected GLib.ByteArray buffer;
		protected int fd;
		protected bool hard;
		protected FsoFramework.TransportFunc hupfunc;
		protected string name;
		protected bool raw;
		protected FsoFramework.TransportFunc readfunc;
		protected uint speed;
		public BaseTransport (string name, uint speed = 0, bool raw = true, bool hard = true);
		public size_t _read (void* rdata, int rlength, int maxWait = 2000);
		protected virtual ssize_t _real_read (int fd, void* data, int len);
		protected virtual ssize_t _real_write (int fd, void* data, int len);
		public override void close ();
		protected virtual void configure ();
		public override void drain ();
		public override void flush ();
		public override int freeze ();
		public override void getDelegates (out FsoFramework.TransportFunc? readfun, out FsoFramework.TransportFunc? hupfun);
		public override string getName ();
		public override bool isOpen ();
		public override bool open ();
		public override async bool openAsync ();
		protected Posix.speed_t parse_speed (uint speed);
		public override int read (void* data, int len);
		public virtual string repr ();
		protected void restartWriter ();
		public override void resume ();
		public override void setBuffered (bool on);
		public override void setDelegates (FsoFramework.TransportFunc? readfunc, FsoFramework.TransportFunc? hupfunc);
		public override void setPriorities (int rp, int wp);
		public override bool suspend ();
		public override void thaw ();
		public override int write (void* data, int len);
		public override int writeAndRead (uchar* wdata, int wlength, uchar* rdata, int rlength, int maxWait = 5000);
	}
	[CCode (cheader_filename = "fsotransport.h")]
	public class CombinedTransport : FsoFramework.BaseTransport {
		public CombinedTransport (string specification);
		public override void close ();
		public override int freeze ();
		public override bool isOpen ();
		public override bool open ();
		public override int read (void* data, int length);
		public override void setBuffered (bool on);
		public override void thaw ();
		public override int write (void* data, int length);
		public override int writeAndRead (void* wdata, int wlength, void* rdata, int rlength, int maxWait = 1000);
	}
	[CCode (cheader_filename = "fsotransport.h")]
	public class DelegateTransport : FsoFramework.BaseTransport {
		public DelegateTransport (FsoFramework.TransportDataFunc writefunc, FsoFramework.TransportDataFunc readfunc, FsoFramework.TransportFunc hupfunc, FsoFramework.TransportBoolFunc openfunc, FsoFramework.TransportFunc closefunc, FsoFramework.TransportIntFunc freezefunc, FsoFramework.TransportFunc thawfunc);
		public override void close ();
		public override int freeze ();
		public override bool isOpen ();
		public override bool open ();
		public override int read (void* data, int length);
		public override void setBuffered (bool on);
		public override void thaw ();
		public override int write (void* data, int length);
		public override int writeAndRead (void* wdata, int wlength, void* rdata, int rlength, int maxWait = 1000);
	}
	[CCode (cheader_filename = "fsotransport.h")]
	public class FdPipe : GLib.Object {
		public FdPipe (int s, int din, int dout);
	}
	[CCode (cheader_filename = "fsotransport.h")]
	public class LineByLineParser : FsoFramework.BaseParser {
		public LineByLineParser (string termination = "\r\n", bool swallow = true);
		public override int feed (char* data, int len);
	}
	[CCode (cheader_filename = "fsotransport.h")]
	public class NgsmAdvancedMuxTransport : FsoFramework.NgsmTransport {
		public NgsmAdvancedMuxTransport (string portname, uint portspeed, uint framesize = 64);
	}
	[CCode (cheader_filename = "fsotransport.h")]
	public class NgsmBasicMuxTransport : FsoFramework.NgsmTransport {
		public NgsmBasicMuxTransport (string portname, uint portspeed, uint framesize = 64);
	}
	[CCode (cheader_filename = "fsotransport.h")]
	public class NgsmTransport : FsoFramework.BaseTransport {
		public NgsmTransport (string portname, uint portspeed, bool advanced, uint framesize = 64);
		public override void close ();
		public override bool open ();
		public override string repr ();
	}
	[CCode (cheader_filename = "fsotransport.h")]
	public class NullParser : FsoFramework.BaseParser {
		public NullParser ();
		public override int feed (void* data, int len);
	}
	[CCode (cheader_filename = "fsotransport.h")]
	public class NullTransport : FsoFramework.BaseTransport {
		public NullTransport (string name = "null", uint speed = 0, bool raw = true, bool hard = true);
		public override void close ();
		public override int freeze ();
		public override string getName ();
		public override bool isOpen ();
		public override bool open ();
		public override int read (void* data, int len);
		public override string repr ();
		public override void thaw ();
		public override int write (void* data, int len);
		public override int writeAndRead (void* wdata, int wlength, void* rdata, int rlength, int maxWait = 1000);
	}
	[CCode (cheader_filename = "fsotransport.h")]
	public class PtyTransport : FsoFramework.BaseTransport {
		public PtyTransport ();
		public override string getName ();
		public override bool open ();
		public override string repr ();
	}
	[CCode (cheader_filename = "fsotransport.h")]
	public class RawTransport : FsoFramework.BaseTransport {
		public RawTransport (string portname);
		protected override void configure ();
		public override bool open ();
		public override string repr ();
		public override void resume ();
		public override bool suspend ();
	}
	[CCode (cheader_filename = "fsotransport.h")]
	public class SerialTransport : FsoFramework.BaseTransport {
		public bool dtr_cycle;
		public SerialTransport (string portname, uint portspeed, bool raw = true, bool hard = true);
		public override bool open ();
		public override string repr ();
	}
	[CCode (cheader_filename = "fsotransport.h")]
	public class SocketTransport : FsoFramework.BaseTransport {
		public SocketTransport (string type, string host, uint port);
		public override void configure ();
		public override string getName ();
		public override bool open ();
		public override string repr ();
	}
	[CCode (cheader_filename = "fsotransport.h")]
	public abstract class Transport : GLib.Object {
		public FsoFramework.Logger logger;
		public Transport ();
		public abstract void close ();
		public static FsoFramework.Transport? create (string type, string name = "", uint speed = 0, bool raw = true, bool hard = true);
		public abstract void drain ();
		public abstract void flush ();
		public abstract int freeze ();
		public abstract void getDelegates (out FsoFramework.TransportFunc? readfun, out FsoFramework.TransportFunc? hupfun);
		public abstract string getName ();
		public abstract bool isOpen ();
		public abstract bool open ();
		public abstract async bool openAsync ();
		public abstract int read (void* data, int length);
		public abstract void resume ();
		public abstract void setBuffered (bool on);
		public abstract void setDelegates (FsoFramework.TransportFunc? readfunc, FsoFramework.TransportFunc? hupfunc);
		public abstract void setPriorities (int rp, int wp);
		public abstract bool suspend ();
		public abstract void thaw ();
		public abstract int write (void* data, int length);
		public abstract int writeAndRead (void* wdata, int wlength, void* rdata, int rlength, int maxWait = 5000);
	}
	[CCode (cheader_filename = "fsotransport.h")]
	public class TransportSpec {
		public bool hard;
		public string name;
		public bool raw;
		public uint speed;
		public string type;
		public TransportSpec (string type, string name = "", uint speed = 0, bool raw = true, bool hard = true);
		public FsoFramework.Transport create ();
		public static FsoFramework.TransportSpec parse (string line);
		public string repr ();
	}
	[CCode (cheader_filename = "fsotransport.h")]
	public interface CommandQueue : GLib.Object {
		public delegate void UnsolicitedHandler (string prefix, string response, string? pdu = null);
		public abstract async void close ();
		public abstract async void freeze (bool drain = false);
		public abstract async bool open ();
		public abstract void registerUnsolicitedHandler (FsoFramework.CommandQueue.UnsolicitedHandler urchandler);
		public abstract async void thaw ();
		public abstract FsoFramework.Transport transport { get; set; }
	}
	[CCode (cheader_filename = "fsotransport.h")]
	public interface Parser : GLib.Object {
		public delegate bool ExpectedPrefixFunc (string line);
		public delegate bool HaveCommandFunc ();
		public delegate void SolicitedCompletedFunc (string[] response);
		public delegate void UnsolicitedCompletedFunc (string[] response);
		public abstract int feed (void* data, int len);
		public abstract void setDelegates (FsoFramework.Parser.HaveCommandFunc haveCommand, FsoFramework.Parser.ExpectedPrefixFunc expectedPrefix, FsoFramework.Parser.SolicitedCompletedFunc solicitedCompleted, FsoFramework.Parser.UnsolicitedCompletedFunc unsolicitedCompleted);
	}
	[CCode (cheader_filename = "fsotransport.h")]
	public enum TransportState {
		CLOSED,
		OPEN,
		ALIVE,
		FROZEN,
		DEAD
	}
	[CCode (cheader_filename = "fsotransport.h")]
	public errordomain TransportError {
		UNABLE_TO_OPEN,
		UNABLE_TO_WRITE
	}
	[CCode (cheader_filename = "fsotransport.h")]
	public delegate bool TransportBoolFunc (FsoFramework.Transport transport);
	[CCode (cheader_filename = "fsotransport.h")]
	public delegate int TransportDataFunc (void* data, int length, FsoFramework.Transport transport);
	[CCode (cheader_filename = "fsotransport.h")]
	public delegate void TransportFunc (FsoFramework.Transport transport);
	[CCode (cheader_filename = "fsotransport.h")]
	public delegate int TransportIntFunc (FsoFramework.Transport transport);
}
