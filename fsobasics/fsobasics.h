/* fsobasics.h generated by valac 0.16.1, the Vala compiler, do not modify */


#ifndef __FSOBASICS_H__
#define __FSOBASICS_H__

#include <glib.h>
#include <glib-object.h>
#include <gio/gio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/inotify.h>
#include <netlink/netlink.h>
#include <netlink/object.h>
#include <netlink/route/link.h>
#include <netlink/route/route.h>
#include <netlink/route/neighbour.h>
#include <netlink/route/rule.h>
#include <netlink/route/qdisc.h>
#include <sys/types.h>
#include <float.h>
#include <math.h>

G_BEGIN_DECLS


#define FSO_FRAMEWORK_TYPE_ABSTRACT_WORKER_QUEUE (fso_framework_abstract_worker_queue_get_type ())
#define FSO_FRAMEWORK_ABSTRACT_WORKER_QUEUE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FSO_FRAMEWORK_TYPE_ABSTRACT_WORKER_QUEUE, FsoFrameworkAbstractWorkerQueue))
#define FSO_FRAMEWORK_IS_ABSTRACT_WORKER_QUEUE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FSO_FRAMEWORK_TYPE_ABSTRACT_WORKER_QUEUE))
#define FSO_FRAMEWORK_ABSTRACT_WORKER_QUEUE_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), FSO_FRAMEWORK_TYPE_ABSTRACT_WORKER_QUEUE, FsoFrameworkAbstractWorkerQueueIface))

typedef struct _FsoFrameworkAbstractWorkerQueue FsoFrameworkAbstractWorkerQueue;
typedef struct _FsoFrameworkAbstractWorkerQueueIface FsoFrameworkAbstractWorkerQueueIface;

#define FSO_FRAMEWORK_TYPE_ASYNC_WORKER_QUEUE (fso_framework_async_worker_queue_get_type ())
#define FSO_FRAMEWORK_ASYNC_WORKER_QUEUE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FSO_FRAMEWORK_TYPE_ASYNC_WORKER_QUEUE, FsoFrameworkAsyncWorkerQueue))
#define FSO_FRAMEWORK_ASYNC_WORKER_QUEUE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), FSO_FRAMEWORK_TYPE_ASYNC_WORKER_QUEUE, FsoFrameworkAsyncWorkerQueueClass))
#define FSO_FRAMEWORK_IS_ASYNC_WORKER_QUEUE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FSO_FRAMEWORK_TYPE_ASYNC_WORKER_QUEUE))
#define FSO_FRAMEWORK_IS_ASYNC_WORKER_QUEUE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), FSO_FRAMEWORK_TYPE_ASYNC_WORKER_QUEUE))
#define FSO_FRAMEWORK_ASYNC_WORKER_QUEUE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), FSO_FRAMEWORK_TYPE_ASYNC_WORKER_QUEUE, FsoFrameworkAsyncWorkerQueueClass))

typedef struct _FsoFrameworkAsyncWorkerQueue FsoFrameworkAsyncWorkerQueue;
typedef struct _FsoFrameworkAsyncWorkerQueueClass FsoFrameworkAsyncWorkerQueueClass;
typedef struct _FsoFrameworkAsyncWorkerQueuePrivate FsoFrameworkAsyncWorkerQueuePrivate;

#define FSO_FRAMEWORK_TYPE_BIN_BUILDER (fso_framework_bin_builder_get_type ())
#define FSO_FRAMEWORK_BIN_BUILDER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FSO_FRAMEWORK_TYPE_BIN_BUILDER, FsoFrameworkBinBuilder))
#define FSO_FRAMEWORK_BIN_BUILDER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), FSO_FRAMEWORK_TYPE_BIN_BUILDER, FsoFrameworkBinBuilderClass))
#define FSO_FRAMEWORK_IS_BIN_BUILDER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FSO_FRAMEWORK_TYPE_BIN_BUILDER))
#define FSO_FRAMEWORK_IS_BIN_BUILDER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), FSO_FRAMEWORK_TYPE_BIN_BUILDER))
#define FSO_FRAMEWORK_BIN_BUILDER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), FSO_FRAMEWORK_TYPE_BIN_BUILDER, FsoFrameworkBinBuilderClass))

typedef struct _FsoFrameworkBinBuilder FsoFrameworkBinBuilder;
typedef struct _FsoFrameworkBinBuilderClass FsoFrameworkBinBuilderClass;
typedef struct _FsoFrameworkBinBuilderPrivate FsoFrameworkBinBuilderPrivate;

#define FSO_FRAMEWORK_TYPE_BIN_READER (fso_framework_bin_reader_get_type ())
#define FSO_FRAMEWORK_BIN_READER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FSO_FRAMEWORK_TYPE_BIN_READER, FsoFrameworkBinReader))
#define FSO_FRAMEWORK_BIN_READER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), FSO_FRAMEWORK_TYPE_BIN_READER, FsoFrameworkBinReaderClass))
#define FSO_FRAMEWORK_IS_BIN_READER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FSO_FRAMEWORK_TYPE_BIN_READER))
#define FSO_FRAMEWORK_IS_BIN_READER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), FSO_FRAMEWORK_TYPE_BIN_READER))
#define FSO_FRAMEWORK_BIN_READER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), FSO_FRAMEWORK_TYPE_BIN_READER, FsoFrameworkBinReaderClass))

typedef struct _FsoFrameworkBinReader FsoFrameworkBinReader;
typedef struct _FsoFrameworkBinReaderClass FsoFrameworkBinReaderClass;
typedef struct _FsoFrameworkBinReaderPrivate FsoFrameworkBinReaderPrivate;

#define FSO_FRAMEWORK_TYPE_INOTIFIER (fso_framework_inotifier_get_type ())
#define FSO_FRAMEWORK_INOTIFIER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FSO_FRAMEWORK_TYPE_INOTIFIER, FsoFrameworkINotifier))
#define FSO_FRAMEWORK_INOTIFIER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), FSO_FRAMEWORK_TYPE_INOTIFIER, FsoFrameworkINotifierClass))
#define FSO_FRAMEWORK_IS_INOTIFIER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FSO_FRAMEWORK_TYPE_INOTIFIER))
#define FSO_FRAMEWORK_IS_INOTIFIER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), FSO_FRAMEWORK_TYPE_INOTIFIER))
#define FSO_FRAMEWORK_INOTIFIER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), FSO_FRAMEWORK_TYPE_INOTIFIER, FsoFrameworkINotifierClass))

typedef struct _FsoFrameworkINotifier FsoFrameworkINotifier;
typedef struct _FsoFrameworkINotifierClass FsoFrameworkINotifierClass;
typedef struct _FsoFrameworkINotifierPrivate FsoFrameworkINotifierPrivate;

#define FSO_FRAMEWORK_TYPE_BASE_KOBJECT_NOTIFIER (fso_framework_base_kobject_notifier_get_type ())
#define FSO_FRAMEWORK_BASE_KOBJECT_NOTIFIER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FSO_FRAMEWORK_TYPE_BASE_KOBJECT_NOTIFIER, FsoFrameworkBaseKObjectNotifier))
#define FSO_FRAMEWORK_BASE_KOBJECT_NOTIFIER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), FSO_FRAMEWORK_TYPE_BASE_KOBJECT_NOTIFIER, FsoFrameworkBaseKObjectNotifierClass))
#define FSO_FRAMEWORK_IS_BASE_KOBJECT_NOTIFIER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FSO_FRAMEWORK_TYPE_BASE_KOBJECT_NOTIFIER))
#define FSO_FRAMEWORK_IS_BASE_KOBJECT_NOTIFIER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), FSO_FRAMEWORK_TYPE_BASE_KOBJECT_NOTIFIER))
#define FSO_FRAMEWORK_BASE_KOBJECT_NOTIFIER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), FSO_FRAMEWORK_TYPE_BASE_KOBJECT_NOTIFIER, FsoFrameworkBaseKObjectNotifierClass))

typedef struct _FsoFrameworkBaseKObjectNotifier FsoFrameworkBaseKObjectNotifier;
typedef struct _FsoFrameworkBaseKObjectNotifierClass FsoFrameworkBaseKObjectNotifierClass;
typedef struct _FsoFrameworkBaseKObjectNotifierPrivate FsoFrameworkBaseKObjectNotifierPrivate;

#define FSO_FRAMEWORK_TYPE_LOGGER (fso_framework_logger_get_type ())
#define FSO_FRAMEWORK_LOGGER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FSO_FRAMEWORK_TYPE_LOGGER, FsoFrameworkLogger))
#define FSO_FRAMEWORK_IS_LOGGER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FSO_FRAMEWORK_TYPE_LOGGER))
#define FSO_FRAMEWORK_LOGGER_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), FSO_FRAMEWORK_TYPE_LOGGER, FsoFrameworkLoggerIface))

typedef struct _FsoFrameworkLogger FsoFrameworkLogger;
typedef struct _FsoFrameworkLoggerIface FsoFrameworkLoggerIface;

#define FSO_FRAMEWORK_TYPE_SMART_KEY_FILE (fso_framework_smart_key_file_get_type ())
#define FSO_FRAMEWORK_SMART_KEY_FILE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FSO_FRAMEWORK_TYPE_SMART_KEY_FILE, FsoFrameworkSmartKeyFile))
#define FSO_FRAMEWORK_SMART_KEY_FILE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), FSO_FRAMEWORK_TYPE_SMART_KEY_FILE, FsoFrameworkSmartKeyFileClass))
#define FSO_FRAMEWORK_IS_SMART_KEY_FILE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FSO_FRAMEWORK_TYPE_SMART_KEY_FILE))
#define FSO_FRAMEWORK_IS_SMART_KEY_FILE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), FSO_FRAMEWORK_TYPE_SMART_KEY_FILE))
#define FSO_FRAMEWORK_SMART_KEY_FILE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), FSO_FRAMEWORK_TYPE_SMART_KEY_FILE, FsoFrameworkSmartKeyFileClass))

typedef struct _FsoFrameworkSmartKeyFile FsoFrameworkSmartKeyFile;
typedef struct _FsoFrameworkSmartKeyFileClass FsoFrameworkSmartKeyFileClass;

#define FSO_FRAMEWORK_TYPE_ABSTRACT_LOGGER (fso_framework_abstract_logger_get_type ())
#define FSO_FRAMEWORK_ABSTRACT_LOGGER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FSO_FRAMEWORK_TYPE_ABSTRACT_LOGGER, FsoFrameworkAbstractLogger))
#define FSO_FRAMEWORK_ABSTRACT_LOGGER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), FSO_FRAMEWORK_TYPE_ABSTRACT_LOGGER, FsoFrameworkAbstractLoggerClass))
#define FSO_FRAMEWORK_IS_ABSTRACT_LOGGER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FSO_FRAMEWORK_TYPE_ABSTRACT_LOGGER))
#define FSO_FRAMEWORK_IS_ABSTRACT_LOGGER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), FSO_FRAMEWORK_TYPE_ABSTRACT_LOGGER))
#define FSO_FRAMEWORK_ABSTRACT_LOGGER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), FSO_FRAMEWORK_TYPE_ABSTRACT_LOGGER, FsoFrameworkAbstractLoggerClass))

typedef struct _FsoFrameworkAbstractLogger FsoFrameworkAbstractLogger;
typedef struct _FsoFrameworkAbstractLoggerClass FsoFrameworkAbstractLoggerClass;
typedef struct _FsoFrameworkAbstractLoggerPrivate FsoFrameworkAbstractLoggerPrivate;

#define FSO_FRAMEWORK_TYPE_NULL_LOGGER (fso_framework_null_logger_get_type ())
#define FSO_FRAMEWORK_NULL_LOGGER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FSO_FRAMEWORK_TYPE_NULL_LOGGER, FsoFrameworkNullLogger))
#define FSO_FRAMEWORK_NULL_LOGGER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), FSO_FRAMEWORK_TYPE_NULL_LOGGER, FsoFrameworkNullLoggerClass))
#define FSO_FRAMEWORK_IS_NULL_LOGGER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FSO_FRAMEWORK_TYPE_NULL_LOGGER))
#define FSO_FRAMEWORK_IS_NULL_LOGGER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), FSO_FRAMEWORK_TYPE_NULL_LOGGER))
#define FSO_FRAMEWORK_NULL_LOGGER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), FSO_FRAMEWORK_TYPE_NULL_LOGGER, FsoFrameworkNullLoggerClass))

typedef struct _FsoFrameworkNullLogger FsoFrameworkNullLogger;
typedef struct _FsoFrameworkNullLoggerClass FsoFrameworkNullLoggerClass;
typedef struct _FsoFrameworkNullLoggerPrivate FsoFrameworkNullLoggerPrivate;

#define FSO_FRAMEWORK_TYPE_FILE_LOGGER (fso_framework_file_logger_get_type ())
#define FSO_FRAMEWORK_FILE_LOGGER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FSO_FRAMEWORK_TYPE_FILE_LOGGER, FsoFrameworkFileLogger))
#define FSO_FRAMEWORK_FILE_LOGGER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), FSO_FRAMEWORK_TYPE_FILE_LOGGER, FsoFrameworkFileLoggerClass))
#define FSO_FRAMEWORK_IS_FILE_LOGGER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FSO_FRAMEWORK_TYPE_FILE_LOGGER))
#define FSO_FRAMEWORK_IS_FILE_LOGGER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), FSO_FRAMEWORK_TYPE_FILE_LOGGER))
#define FSO_FRAMEWORK_FILE_LOGGER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), FSO_FRAMEWORK_TYPE_FILE_LOGGER, FsoFrameworkFileLoggerClass))

typedef struct _FsoFrameworkFileLogger FsoFrameworkFileLogger;
typedef struct _FsoFrameworkFileLoggerClass FsoFrameworkFileLoggerClass;
typedef struct _FsoFrameworkFileLoggerPrivate FsoFrameworkFileLoggerPrivate;

#define FSO_FRAMEWORK_TYPE_STD_ERR_LOGGER (fso_framework_std_err_logger_get_type ())
#define FSO_FRAMEWORK_STD_ERR_LOGGER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FSO_FRAMEWORK_TYPE_STD_ERR_LOGGER, FsoFrameworkStdErrLogger))
#define FSO_FRAMEWORK_STD_ERR_LOGGER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), FSO_FRAMEWORK_TYPE_STD_ERR_LOGGER, FsoFrameworkStdErrLoggerClass))
#define FSO_FRAMEWORK_IS_STD_ERR_LOGGER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FSO_FRAMEWORK_TYPE_STD_ERR_LOGGER))
#define FSO_FRAMEWORK_IS_STD_ERR_LOGGER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), FSO_FRAMEWORK_TYPE_STD_ERR_LOGGER))
#define FSO_FRAMEWORK_STD_ERR_LOGGER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), FSO_FRAMEWORK_TYPE_STD_ERR_LOGGER, FsoFrameworkStdErrLoggerClass))

typedef struct _FsoFrameworkStdErrLogger FsoFrameworkStdErrLogger;
typedef struct _FsoFrameworkStdErrLoggerClass FsoFrameworkStdErrLoggerClass;
typedef struct _FsoFrameworkStdErrLoggerPrivate FsoFrameworkStdErrLoggerPrivate;

#define FSO_FRAMEWORK_TYPE_SYSLOG_LOGGER (fso_framework_syslog_logger_get_type ())
#define FSO_FRAMEWORK_SYSLOG_LOGGER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FSO_FRAMEWORK_TYPE_SYSLOG_LOGGER, FsoFrameworkSyslogLogger))
#define FSO_FRAMEWORK_SYSLOG_LOGGER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), FSO_FRAMEWORK_TYPE_SYSLOG_LOGGER, FsoFrameworkSyslogLoggerClass))
#define FSO_FRAMEWORK_IS_SYSLOG_LOGGER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FSO_FRAMEWORK_TYPE_SYSLOG_LOGGER))
#define FSO_FRAMEWORK_IS_SYSLOG_LOGGER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), FSO_FRAMEWORK_TYPE_SYSLOG_LOGGER))
#define FSO_FRAMEWORK_SYSLOG_LOGGER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), FSO_FRAMEWORK_TYPE_SYSLOG_LOGGER, FsoFrameworkSyslogLoggerClass))

typedef struct _FsoFrameworkSyslogLogger FsoFrameworkSyslogLogger;
typedef struct _FsoFrameworkSyslogLoggerClass FsoFrameworkSyslogLoggerClass;
typedef struct _FsoFrameworkSyslogLoggerPrivate FsoFrameworkSyslogLoggerPrivate;

#define FSO_FRAMEWORK_TYPE_KMSG_LOGGER (fso_framework_kmsg_logger_get_type ())
#define FSO_FRAMEWORK_KMSG_LOGGER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FSO_FRAMEWORK_TYPE_KMSG_LOGGER, FsoFrameworkKmsgLogger))
#define FSO_FRAMEWORK_KMSG_LOGGER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), FSO_FRAMEWORK_TYPE_KMSG_LOGGER, FsoFrameworkKmsgLoggerClass))
#define FSO_FRAMEWORK_IS_KMSG_LOGGER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FSO_FRAMEWORK_TYPE_KMSG_LOGGER))
#define FSO_FRAMEWORK_IS_KMSG_LOGGER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), FSO_FRAMEWORK_TYPE_KMSG_LOGGER))
#define FSO_FRAMEWORK_KMSG_LOGGER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), FSO_FRAMEWORK_TYPE_KMSG_LOGGER, FsoFrameworkKmsgLoggerClass))

typedef struct _FsoFrameworkKmsgLogger FsoFrameworkKmsgLogger;
typedef struct _FsoFrameworkKmsgLoggerClass FsoFrameworkKmsgLoggerClass;
typedef struct _FsoFrameworkKmsgLoggerPrivate FsoFrameworkKmsgLoggerPrivate;

#define TYPE_GLIB_LOGGER (glib_logger_get_type ())
#define GLIB_LOGGER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_GLIB_LOGGER, GLibLogger))
#define GLIB_LOGGER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_GLIB_LOGGER, GLibLoggerClass))
#define IS_GLIB_LOGGER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_GLIB_LOGGER))
#define IS_GLIB_LOGGER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_GLIB_LOGGER))
#define GLIB_LOGGER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_GLIB_LOGGER, GLibLoggerClass))

typedef struct _GLibLogger GLibLogger;
typedef struct _GLibLoggerClass GLibLoggerClass;
typedef struct _GLibLoggerPrivate GLibLoggerPrivate;

#define FSO_FRAMEWORK_TYPE_BASE_NETLINK_NOTIFIER (fso_framework_base_netlink_notifier_get_type ())
#define FSO_FRAMEWORK_BASE_NETLINK_NOTIFIER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FSO_FRAMEWORK_TYPE_BASE_NETLINK_NOTIFIER, FsoFrameworkBaseNetlinkNotifier))
#define FSO_FRAMEWORK_BASE_NETLINK_NOTIFIER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), FSO_FRAMEWORK_TYPE_BASE_NETLINK_NOTIFIER, FsoFrameworkBaseNetlinkNotifierClass))
#define FSO_FRAMEWORK_IS_BASE_NETLINK_NOTIFIER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FSO_FRAMEWORK_TYPE_BASE_NETLINK_NOTIFIER))
#define FSO_FRAMEWORK_IS_BASE_NETLINK_NOTIFIER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), FSO_FRAMEWORK_TYPE_BASE_NETLINK_NOTIFIER))
#define FSO_FRAMEWORK_BASE_NETLINK_NOTIFIER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), FSO_FRAMEWORK_TYPE_BASE_NETLINK_NOTIFIER, FsoFrameworkBaseNetlinkNotifierClass))

typedef struct _FsoFrameworkBaseNetlinkNotifier FsoFrameworkBaseNetlinkNotifier;
typedef struct _FsoFrameworkBaseNetlinkNotifierClass FsoFrameworkBaseNetlinkNotifierClass;
typedef struct _FsoFrameworkBaseNetlinkNotifierPrivate FsoFrameworkBaseNetlinkNotifierPrivate;

#define FSO_FRAMEWORK_TYPE_OVERLAY_FILE (fso_framework_overlay_file_get_type ())
#define FSO_FRAMEWORK_OVERLAY_FILE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FSO_FRAMEWORK_TYPE_OVERLAY_FILE, FsoFrameworkOverlayFile))
#define FSO_FRAMEWORK_OVERLAY_FILE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), FSO_FRAMEWORK_TYPE_OVERLAY_FILE, FsoFrameworkOverlayFileClass))
#define FSO_FRAMEWORK_IS_OVERLAY_FILE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FSO_FRAMEWORK_TYPE_OVERLAY_FILE))
#define FSO_FRAMEWORK_IS_OVERLAY_FILE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), FSO_FRAMEWORK_TYPE_OVERLAY_FILE))
#define FSO_FRAMEWORK_OVERLAY_FILE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), FSO_FRAMEWORK_TYPE_OVERLAY_FILE, FsoFrameworkOverlayFileClass))

typedef struct _FsoFrameworkOverlayFile FsoFrameworkOverlayFile;
typedef struct _FsoFrameworkOverlayFileClass FsoFrameworkOverlayFileClass;
typedef struct _FsoFrameworkOverlayFilePrivate FsoFrameworkOverlayFilePrivate;

#define FSO_FRAMEWORK_TYPE_IPROCESS_GUARD (fso_framework_iprocess_guard_get_type ())
#define FSO_FRAMEWORK_IPROCESS_GUARD(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FSO_FRAMEWORK_TYPE_IPROCESS_GUARD, FsoFrameworkIProcessGuard))
#define FSO_FRAMEWORK_IS_IPROCESS_GUARD(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FSO_FRAMEWORK_TYPE_IPROCESS_GUARD))
#define FSO_FRAMEWORK_IPROCESS_GUARD_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), FSO_FRAMEWORK_TYPE_IPROCESS_GUARD, FsoFrameworkIProcessGuardIface))

typedef struct _FsoFrameworkIProcessGuard FsoFrameworkIProcessGuard;
typedef struct _FsoFrameworkIProcessGuardIface FsoFrameworkIProcessGuardIface;

#define FSO_FRAMEWORK_TYPE_GPROCESS_GUARD (fso_framework_gprocess_guard_get_type ())
#define FSO_FRAMEWORK_GPROCESS_GUARD(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FSO_FRAMEWORK_TYPE_GPROCESS_GUARD, FsoFrameworkGProcessGuard))
#define FSO_FRAMEWORK_GPROCESS_GUARD_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), FSO_FRAMEWORK_TYPE_GPROCESS_GUARD, FsoFrameworkGProcessGuardClass))
#define FSO_FRAMEWORK_IS_GPROCESS_GUARD(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FSO_FRAMEWORK_TYPE_GPROCESS_GUARD))
#define FSO_FRAMEWORK_IS_GPROCESS_GUARD_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), FSO_FRAMEWORK_TYPE_GPROCESS_GUARD))
#define FSO_FRAMEWORK_GPROCESS_GUARD_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), FSO_FRAMEWORK_TYPE_GPROCESS_GUARD, FsoFrameworkGProcessGuardClass))

typedef struct _FsoFrameworkGProcessGuard FsoFrameworkGProcessGuard;
typedef struct _FsoFrameworkGProcessGuardClass FsoFrameworkGProcessGuardClass;
typedef struct _FsoFrameworkGProcessGuardPrivate FsoFrameworkGProcessGuardPrivate;

#define TYPE_ASYNC_PROCESS (async_process_get_type ())
#define ASYNC_PROCESS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_ASYNC_PROCESS, AsyncProcess))
#define ASYNC_PROCESS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_ASYNC_PROCESS, AsyncProcessClass))
#define IS_ASYNC_PROCESS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_ASYNC_PROCESS))
#define IS_ASYNC_PROCESS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_ASYNC_PROCESS))
#define ASYNC_PROCESS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_ASYNC_PROCESS, AsyncProcessClass))

typedef struct _AsyncProcess AsyncProcess;
typedef struct _AsyncProcessClass AsyncProcessClass;
typedef struct _AsyncProcessPrivate AsyncProcessPrivate;
typedef struct _FsoFrameworkSmartKeyFilePrivate FsoFrameworkSmartKeyFilePrivate;

#define FSO_FRAMEWORK_TYPE_SMART_KEY_FILE_SECTION (fso_framework_smart_key_file_section_get_type ())
#define FSO_FRAMEWORK_SMART_KEY_FILE_SECTION(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FSO_FRAMEWORK_TYPE_SMART_KEY_FILE_SECTION, FsoFrameworkSmartKeyFileSection))
#define FSO_FRAMEWORK_SMART_KEY_FILE_SECTION_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), FSO_FRAMEWORK_TYPE_SMART_KEY_FILE_SECTION, FsoFrameworkSmartKeyFileSectionClass))
#define FSO_FRAMEWORK_IS_SMART_KEY_FILE_SECTION(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FSO_FRAMEWORK_TYPE_SMART_KEY_FILE_SECTION))
#define FSO_FRAMEWORK_IS_SMART_KEY_FILE_SECTION_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), FSO_FRAMEWORK_TYPE_SMART_KEY_FILE_SECTION))
#define FSO_FRAMEWORK_SMART_KEY_FILE_SECTION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), FSO_FRAMEWORK_TYPE_SMART_KEY_FILE_SECTION, FsoFrameworkSmartKeyFileSectionClass))

typedef struct _FsoFrameworkSmartKeyFileSection FsoFrameworkSmartKeyFileSection;
typedef struct _FsoFrameworkSmartKeyFileSectionClass FsoFrameworkSmartKeyFileSectionClass;
typedef struct _FsoFrameworkSmartKeyFileSectionPrivate FsoFrameworkSmartKeyFileSectionPrivate;

#define FSO_FRAMEWORK_TYPE_SYNC_WRAPPER (fso_framework_sync_wrapper_get_type ())
#define FSO_FRAMEWORK_SYNC_WRAPPER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FSO_FRAMEWORK_TYPE_SYNC_WRAPPER, FsoFrameworkSyncWrapper))
#define FSO_FRAMEWORK_SYNC_WRAPPER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), FSO_FRAMEWORK_TYPE_SYNC_WRAPPER, FsoFrameworkSyncWrapperClass))
#define FSO_FRAMEWORK_IS_SYNC_WRAPPER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FSO_FRAMEWORK_TYPE_SYNC_WRAPPER))
#define FSO_FRAMEWORK_IS_SYNC_WRAPPER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), FSO_FRAMEWORK_TYPE_SYNC_WRAPPER))
#define FSO_FRAMEWORK_SYNC_WRAPPER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), FSO_FRAMEWORK_TYPE_SYNC_WRAPPER, FsoFrameworkSyncWrapperClass))

typedef struct _FsoFrameworkSyncWrapper FsoFrameworkSyncWrapper;
typedef struct _FsoFrameworkSyncWrapperClass FsoFrameworkSyncWrapperClass;
typedef struct _FsoFrameworkSyncWrapperPrivate FsoFrameworkSyncWrapperPrivate;

#define FSO_FRAMEWORK_TYPE_WAIT_FOR_PREDICATE (fso_framework_wait_for_predicate_get_type ())
#define FSO_FRAMEWORK_WAIT_FOR_PREDICATE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FSO_FRAMEWORK_TYPE_WAIT_FOR_PREDICATE, FsoFrameworkWaitForPredicate))
#define FSO_FRAMEWORK_WAIT_FOR_PREDICATE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), FSO_FRAMEWORK_TYPE_WAIT_FOR_PREDICATE, FsoFrameworkWaitForPredicateClass))
#define FSO_FRAMEWORK_IS_WAIT_FOR_PREDICATE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FSO_FRAMEWORK_TYPE_WAIT_FOR_PREDICATE))
#define FSO_FRAMEWORK_IS_WAIT_FOR_PREDICATE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), FSO_FRAMEWORK_TYPE_WAIT_FOR_PREDICATE))
#define FSO_FRAMEWORK_WAIT_FOR_PREDICATE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), FSO_FRAMEWORK_TYPE_WAIT_FOR_PREDICATE, FsoFrameworkWaitForPredicateClass))

typedef struct _FsoFrameworkWaitForPredicate FsoFrameworkWaitForPredicate;
typedef struct _FsoFrameworkWaitForPredicateClass FsoFrameworkWaitForPredicateClass;
typedef struct _FsoFrameworkWaitForPredicatePrivate FsoFrameworkWaitForPredicatePrivate;

#define FSO_FRAMEWORK_TYPE_TERNARY (fso_framework_ternary_get_type ())

#define FSO_FRAMEWORK_TYPE_TYPED_ARRAY_WRAPPER (fso_framework_typed_array_wrapper_get_type ())
#define FSO_FRAMEWORK_TYPED_ARRAY_WRAPPER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FSO_FRAMEWORK_TYPE_TYPED_ARRAY_WRAPPER, FsoFrameworkTypedArrayWrapper))
#define FSO_FRAMEWORK_TYPED_ARRAY_WRAPPER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), FSO_FRAMEWORK_TYPE_TYPED_ARRAY_WRAPPER, FsoFrameworkTypedArrayWrapperClass))
#define FSO_FRAMEWORK_IS_TYPED_ARRAY_WRAPPER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FSO_FRAMEWORK_TYPE_TYPED_ARRAY_WRAPPER))
#define FSO_FRAMEWORK_IS_TYPED_ARRAY_WRAPPER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), FSO_FRAMEWORK_TYPE_TYPED_ARRAY_WRAPPER))
#define FSO_FRAMEWORK_TYPED_ARRAY_WRAPPER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), FSO_FRAMEWORK_TYPE_TYPED_ARRAY_WRAPPER, FsoFrameworkTypedArrayWrapperClass))

typedef struct _FsoFrameworkTypedArrayWrapper FsoFrameworkTypedArrayWrapper;
typedef struct _FsoFrameworkTypedArrayWrapperClass FsoFrameworkTypedArrayWrapperClass;
typedef struct _FsoFrameworkTypedArrayWrapperPrivate FsoFrameworkTypedArrayWrapperPrivate;

#define FSO_FRAMEWORK_TYPE_PAIR (fso_framework_pair_get_type ())
#define FSO_FRAMEWORK_PAIR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FSO_FRAMEWORK_TYPE_PAIR, FsoFrameworkPair))
#define FSO_FRAMEWORK_PAIR_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), FSO_FRAMEWORK_TYPE_PAIR, FsoFrameworkPairClass))
#define FSO_FRAMEWORK_IS_PAIR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FSO_FRAMEWORK_TYPE_PAIR))
#define FSO_FRAMEWORK_IS_PAIR_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), FSO_FRAMEWORK_TYPE_PAIR))
#define FSO_FRAMEWORK_PAIR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), FSO_FRAMEWORK_TYPE_PAIR, FsoFrameworkPairClass))

typedef struct _FsoFrameworkPair FsoFrameworkPair;
typedef struct _FsoFrameworkPairClass FsoFrameworkPairClass;
typedef struct _FsoFrameworkPairPrivate FsoFrameworkPairPrivate;

#define FSO_FRAMEWORK_TYPE_TRIPLE (fso_framework_triple_get_type ())
#define FSO_FRAMEWORK_TRIPLE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FSO_FRAMEWORK_TYPE_TRIPLE, FsoFrameworkTriple))
#define FSO_FRAMEWORK_TRIPLE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), FSO_FRAMEWORK_TYPE_TRIPLE, FsoFrameworkTripleClass))
#define FSO_FRAMEWORK_IS_TRIPLE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FSO_FRAMEWORK_TYPE_TRIPLE))
#define FSO_FRAMEWORK_IS_TRIPLE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), FSO_FRAMEWORK_TYPE_TRIPLE))
#define FSO_FRAMEWORK_TRIPLE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), FSO_FRAMEWORK_TYPE_TRIPLE, FsoFrameworkTripleClass))

typedef struct _FsoFrameworkTriple FsoFrameworkTriple;
typedef struct _FsoFrameworkTripleClass FsoFrameworkTripleClass;
typedef struct _FsoFrameworkTriplePrivate FsoFrameworkTriplePrivate;

#define FSO_FRAMEWORK_TYPE_QUADTRUPLE (fso_framework_quadtruple_get_type ())
#define FSO_FRAMEWORK_QUADTRUPLE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FSO_FRAMEWORK_TYPE_QUADTRUPLE, FsoFrameworkQuadtruple))
#define FSO_FRAMEWORK_QUADTRUPLE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), FSO_FRAMEWORK_TYPE_QUADTRUPLE, FsoFrameworkQuadtrupleClass))
#define FSO_FRAMEWORK_IS_QUADTRUPLE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FSO_FRAMEWORK_TYPE_QUADTRUPLE))
#define FSO_FRAMEWORK_IS_QUADTRUPLE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), FSO_FRAMEWORK_TYPE_QUADTRUPLE))
#define FSO_FRAMEWORK_QUADTRUPLE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), FSO_FRAMEWORK_TYPE_QUADTRUPLE, FsoFrameworkQuadtrupleClass))

typedef struct _FsoFrameworkQuadtruple FsoFrameworkQuadtruple;
typedef struct _FsoFrameworkQuadtrupleClass FsoFrameworkQuadtrupleClass;
typedef struct _FsoFrameworkQuadtruplePrivate FsoFrameworkQuadtruplePrivate;
typedef struct _FsoFrameworkAsyncEventFd FsoFrameworkAsyncEventFd;

#define FSO_FRAMEWORK_ASYNC_TYPE_REACTOR_CHANNEL (fso_framework_async_reactor_channel_get_type ())
#define FSO_FRAMEWORK_ASYNC_REACTOR_CHANNEL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FSO_FRAMEWORK_ASYNC_TYPE_REACTOR_CHANNEL, FsoFrameworkAsyncReactorChannel))
#define FSO_FRAMEWORK_ASYNC_REACTOR_CHANNEL_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), FSO_FRAMEWORK_ASYNC_TYPE_REACTOR_CHANNEL, FsoFrameworkAsyncReactorChannelClass))
#define FSO_FRAMEWORK_ASYNC_IS_REACTOR_CHANNEL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FSO_FRAMEWORK_ASYNC_TYPE_REACTOR_CHANNEL))
#define FSO_FRAMEWORK_ASYNC_IS_REACTOR_CHANNEL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), FSO_FRAMEWORK_ASYNC_TYPE_REACTOR_CHANNEL))
#define FSO_FRAMEWORK_ASYNC_REACTOR_CHANNEL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), FSO_FRAMEWORK_ASYNC_TYPE_REACTOR_CHANNEL, FsoFrameworkAsyncReactorChannelClass))

typedef struct _FsoFrameworkAsyncReactorChannel FsoFrameworkAsyncReactorChannel;
typedef struct _FsoFrameworkAsyncReactorChannelClass FsoFrameworkAsyncReactorChannelClass;
typedef struct _FsoFrameworkAsyncReactorChannelPrivate FsoFrameworkAsyncReactorChannelPrivate;

#define FSO_FRAMEWORK_TYPE_KERNEL26_MODULE (fso_framework_kernel26_module_get_type ())
#define FSO_FRAMEWORK_KERNEL26_MODULE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FSO_FRAMEWORK_TYPE_KERNEL26_MODULE, FsoFrameworkKernel26Module))
#define FSO_FRAMEWORK_KERNEL26_MODULE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), FSO_FRAMEWORK_TYPE_KERNEL26_MODULE, FsoFrameworkKernel26ModuleClass))
#define FSO_FRAMEWORK_IS_KERNEL26_MODULE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FSO_FRAMEWORK_TYPE_KERNEL26_MODULE))
#define FSO_FRAMEWORK_IS_KERNEL26_MODULE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), FSO_FRAMEWORK_TYPE_KERNEL26_MODULE))
#define FSO_FRAMEWORK_KERNEL26_MODULE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), FSO_FRAMEWORK_TYPE_KERNEL26_MODULE, FsoFrameworkKernel26ModuleClass))

typedef struct _FsoFrameworkKernel26Module FsoFrameworkKernel26Module;
typedef struct _FsoFrameworkKernel26ModuleClass FsoFrameworkKernel26ModuleClass;
typedef struct _FsoFrameworkKernel26ModulePrivate FsoFrameworkKernel26ModulePrivate;

#define FSO_FRAMEWORK_TYPE_ABSTRACT_OBJECT (fso_framework_abstract_object_get_type ())
#define FSO_FRAMEWORK_ABSTRACT_OBJECT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FSO_FRAMEWORK_TYPE_ABSTRACT_OBJECT, FsoFrameworkAbstractObject))
#define FSO_FRAMEWORK_ABSTRACT_OBJECT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), FSO_FRAMEWORK_TYPE_ABSTRACT_OBJECT, FsoFrameworkAbstractObjectClass))
#define FSO_FRAMEWORK_IS_ABSTRACT_OBJECT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FSO_FRAMEWORK_TYPE_ABSTRACT_OBJECT))
#define FSO_FRAMEWORK_IS_ABSTRACT_OBJECT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), FSO_FRAMEWORK_TYPE_ABSTRACT_OBJECT))
#define FSO_FRAMEWORK_ABSTRACT_OBJECT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), FSO_FRAMEWORK_TYPE_ABSTRACT_OBJECT, FsoFrameworkAbstractObjectClass))

typedef struct _FsoFrameworkAbstractObject FsoFrameworkAbstractObject;
typedef struct _FsoFrameworkAbstractObjectClass FsoFrameworkAbstractObjectClass;
typedef struct _FsoFrameworkAbstractObjectPrivate FsoFrameworkAbstractObjectPrivate;

typedef void (*FsoFrameworkAbstractWorkerQueueWorkerFunc) (gconstpointer element, void* user_data);
struct _FsoFrameworkAbstractWorkerQueueIface {
	GTypeInterface parent_iface;
	void (*setDelegate) (FsoFrameworkAbstractWorkerQueue* self, FsoFrameworkAbstractWorkerQueueWorkerFunc worker, void* worker_target);
	void (*enqueue) (FsoFrameworkAbstractWorkerQueue* self, gconstpointer element);
	void (*trigger) (FsoFrameworkAbstractWorkerQueue* self);
};

struct _FsoFrameworkAsyncWorkerQueue {
	GObject parent_instance;
	FsoFrameworkAsyncWorkerQueuePrivate * priv;
	GQueue* q;
	FsoFrameworkAbstractWorkerQueueWorkerFunc worker;
	gpointer worker_target;
	GDestroyNotify worker_target_destroy_notify;
};

struct _FsoFrameworkAsyncWorkerQueueClass {
	GObjectClass parent_class;
};

struct _FsoFrameworkBinBuilder {
	GObject parent_instance;
	FsoFrameworkBinBuilderPrivate * priv;
	GList* _data;
};

struct _FsoFrameworkBinBuilderClass {
	GObjectClass parent_class;
};

struct _FsoFrameworkBinReader {
	GObject parent_instance;
	FsoFrameworkBinReaderPrivate * priv;
	GDataStreamByteOrder endianess;
};

struct _FsoFrameworkBinReaderClass {
	GObjectClass parent_class;
};

typedef enum  {
	FSO_FRAMEWORK_BIN_READER_ERROR_OUT_OF_RANGE,
	FSO_FRAMEWORK_BIN_READER_ERROR_CHECKSUM_IN_DATA,
	FSO_FRAMEWORK_BIN_READER_ERROR_ILLEGAL_PARAMETER
} FsoFrameworkBinReaderError;
#define FSO_FRAMEWORK_BIN_READER_ERROR fso_framework_bin_reader_error_quark ()
typedef void (*FsoFrameworkINotifyNotifierFunc) (int flags, guint32 cookie, const gchar* name, void* user_data);
struct _FsoFrameworkINotifier {
	GObject parent_instance;
	FsoFrameworkINotifierPrivate * priv;
};

struct _FsoFrameworkINotifierClass {
	GObjectClass parent_class;
};

typedef void (*FsoFrameworkKObjectNotifierFunc) (GHashTable* properties, void* user_data);
struct _FsoFrameworkBaseKObjectNotifier {
	GObject parent_instance;
	FsoFrameworkBaseKObjectNotifierPrivate * priv;
};

struct _FsoFrameworkBaseKObjectNotifierClass {
	GObjectClass parent_class;
};

typedef gchar* (*ReprDelegate) (void* user_data);
struct _FsoFrameworkLoggerIface {
	GTypeInterface parent_iface;
	void (*setLevel) (FsoFrameworkLogger* self, GLogLevelFlags level);
	void (*setDestination) (FsoFrameworkLogger* self, const gchar* destination);
	void (*setReprDelegate) (FsoFrameworkLogger* self, ReprDelegate repr, void* repr_target);
	GLogLevelFlags (*getLevel) (FsoFrameworkLogger* self);
	gchar* (*getDestination) (FsoFrameworkLogger* self);
	gboolean (*debug) (FsoFrameworkLogger* self, const gchar* message);
	gboolean (*info) (FsoFrameworkLogger* self, const gchar* message);
	gboolean (*warning) (FsoFrameworkLogger* self, const gchar* message);
	gboolean (*error) (FsoFrameworkLogger* self, const gchar* message);
	gboolean (*critical) (FsoFrameworkLogger* self, const gchar* message);
	gboolean (*data) (FsoFrameworkLogger* self, guint8* message, int message_length1, gboolean in, GLogLevelFlags when);
};

struct _FsoFrameworkAbstractLogger {
	GObject parent_instance;
	FsoFrameworkAbstractLoggerPrivate * priv;
	guint level;
	gchar* domain;
	gchar* destination;
	gboolean colored;
	ReprDelegate reprdelegate;
	gpointer reprdelegate_target;
	GDestroyNotify reprdelegate_target_destroy_notify;
};

struct _FsoFrameworkAbstractLoggerClass {
	GObjectClass parent_class;
	void (*write) (FsoFrameworkAbstractLogger* self, const gchar* message);
	gchar* (*format) (FsoFrameworkAbstractLogger* self, const gchar* message, const gchar* level);
};

struct _FsoFrameworkNullLogger {
	FsoFrameworkAbstractLogger parent_instance;
	FsoFrameworkNullLoggerPrivate * priv;
};

struct _FsoFrameworkNullLoggerClass {
	FsoFrameworkAbstractLoggerClass parent_class;
};

struct _FsoFrameworkFileLogger {
	FsoFrameworkAbstractLogger parent_instance;
	FsoFrameworkFileLoggerPrivate * priv;
};

struct _FsoFrameworkFileLoggerClass {
	FsoFrameworkAbstractLoggerClass parent_class;
};

struct _FsoFrameworkStdErrLogger {
	FsoFrameworkFileLogger parent_instance;
	FsoFrameworkStdErrLoggerPrivate * priv;
};

struct _FsoFrameworkStdErrLoggerClass {
	FsoFrameworkFileLoggerClass parent_class;
};

struct _FsoFrameworkSyslogLogger {
	FsoFrameworkAbstractLogger parent_instance;
	FsoFrameworkSyslogLoggerPrivate * priv;
};

struct _FsoFrameworkSyslogLoggerClass {
	FsoFrameworkAbstractLoggerClass parent_class;
};

struct _FsoFrameworkKmsgLogger {
	FsoFrameworkAbstractLogger parent_instance;
	FsoFrameworkKmsgLoggerPrivate * priv;
};

struct _FsoFrameworkKmsgLoggerClass {
	FsoFrameworkAbstractLoggerClass parent_class;
};

struct _GLibLogger {
	GObject parent_instance;
	GLibLoggerPrivate * priv;
};

struct _GLibLoggerClass {
	GObjectClass parent_class;
};

typedef void (*FsoFrameworkNetlinkNotifierFunc) (GHashTable* properties, void* user_data);
struct _FsoFrameworkBaseNetlinkNotifier {
	GObject parent_instance;
	FsoFrameworkBaseNetlinkNotifierPrivate * priv;
	struct nl_cache* cache;
	struct nl_sock* socket;
};

struct _FsoFrameworkBaseNetlinkNotifierClass {
	GObjectClass parent_class;
};

struct _FsoFrameworkOverlayFile {
	GObject parent_instance;
	FsoFrameworkOverlayFilePrivate * priv;
};

struct _FsoFrameworkOverlayFileClass {
	GObjectClass parent_class;
};

struct _FsoFrameworkIProcessGuardIface {
	GTypeInterface parent_iface;
	gboolean (*launch) (FsoFrameworkIProcessGuard* self, gchar** command, int command_length1);
	void (*stop) (FsoFrameworkIProcessGuard* self, gint sig);
	void (*setAutoRelaunch) (FsoFrameworkIProcessGuard* self, gboolean on);
	gboolean (*sendSignal) (FsoFrameworkIProcessGuard* self, gint sig);
	gboolean (*isRunning) (FsoFrameworkIProcessGuard* self);
};

struct _FsoFrameworkGProcessGuard {
	GObject parent_instance;
	FsoFrameworkGProcessGuardPrivate * priv;
};

struct _FsoFrameworkGProcessGuardClass {
	GObjectClass parent_class;
};

struct _AsyncProcess {
	GObject parent_instance;
	AsyncProcessPrivate * priv;
};

struct _AsyncProcessClass {
	GObjectClass parent_class;
};

struct _FsoFrameworkSmartKeyFile {
	GObject parent_instance;
	FsoFrameworkSmartKeyFilePrivate * priv;
};

struct _FsoFrameworkSmartKeyFileClass {
	GObjectClass parent_class;
};

struct _FsoFrameworkSmartKeyFileSection {
	GObject parent_instance;
	FsoFrameworkSmartKeyFileSectionPrivate * priv;
};

struct _FsoFrameworkSmartKeyFileSectionClass {
	GObjectClass parent_class;
};

struct _FsoFrameworkSyncWrapper {
	GObject parent_instance;
	FsoFrameworkSyncWrapperPrivate * priv;
	GVoidFunc func;
	GMainLoop* loop;
};

struct _FsoFrameworkSyncWrapperClass {
	GObjectClass parent_class;
	gboolean (*onIdle) (FsoFrameworkSyncWrapper* self);
};

struct _FsoFrameworkWaitForPredicate {
	GObject parent_instance;
	FsoFrameworkWaitForPredicatePrivate * priv;
};

struct _FsoFrameworkWaitForPredicateClass {
	GObjectClass parent_class;
};

typedef void (*FsoFrameworkThreadingVoidFuncWithVoidStarParam) (void* param, void* user_data);
typedef enum  {
	FSO_FRAMEWORK_TERNARY_UNKNOWN = -1,
	FSO_FRAMEWORK_TERNARY_FALSE = 0,
	FSO_FRAMEWORK_TERNARY_TRUE = 1
} FsoFrameworkTernary;

struct _FsoFrameworkTypedArrayWrapper {
	GTypeInstance parent_instance;
	volatile int ref_count;
	FsoFrameworkTypedArrayWrapperPrivate * priv;
	gpointer* data;
	gint data_length1;
};

struct _FsoFrameworkTypedArrayWrapperClass {
	GTypeClass parent_class;
	void (*finalize) (FsoFrameworkTypedArrayWrapper *self);
};

struct _FsoFrameworkPair {
	GTypeInstance parent_instance;
	volatile int ref_count;
	FsoFrameworkPairPrivate * priv;
	gpointer first;
	gpointer second;
};

struct _FsoFrameworkPairClass {
	GTypeClass parent_class;
	void (*finalize) (FsoFrameworkPair *self);
};

struct _FsoFrameworkTriple {
	GTypeInstance parent_instance;
	volatile int ref_count;
	FsoFrameworkTriplePrivate * priv;
	gpointer first;
	gpointer second;
	gpointer third;
};

struct _FsoFrameworkTripleClass {
	GTypeClass parent_class;
	void (*finalize) (FsoFrameworkTriple *self);
};

struct _FsoFrameworkQuadtruple {
	GTypeInstance parent_instance;
	volatile int ref_count;
	FsoFrameworkQuadtruplePrivate * priv;
	gpointer first;
	gpointer second;
	gpointer third;
	gpointer fourth;
};

struct _FsoFrameworkQuadtrupleClass {
	GTypeClass parent_class;
	void (*finalize) (FsoFrameworkQuadtruple *self);
};

struct _FsoFrameworkAsyncEventFd {
	GIOChannel* channel;
	guint watch;
};

struct _FsoFrameworkAsyncReactorChannel {
	GObject parent_instance;
	FsoFrameworkAsyncReactorChannelPrivate * priv;
};

struct _FsoFrameworkAsyncReactorChannelClass {
	GObjectClass parent_class;
};

typedef void (*FsoFrameworkAsyncReactorChannelActionFunc) (void* data, gssize length, void* user_data);
struct _FsoFrameworkKernel26Module {
	GTypeInstance parent_instance;
	volatile int ref_count;
	FsoFrameworkKernel26ModulePrivate * priv;
};

struct _FsoFrameworkKernel26ModuleClass {
	GTypeClass parent_class;
	void (*finalize) (FsoFrameworkKernel26Module *self);
};

struct _FsoFrameworkAbstractObject {
	GObject parent_instance;
	FsoFrameworkAbstractObjectPrivate * priv;
	FsoFrameworkSmartKeyFile* config;
	FsoFrameworkLogger* logger;
	gchar* classname;
};

struct _FsoFrameworkAbstractObjectClass {
	GObjectClass parent_class;
	gchar* (*repr) (FsoFrameworkAbstractObject* self);
};


GType fso_framework_abstract_worker_queue_get_type (void) G_GNUC_CONST;
void fso_framework_abstract_worker_queue_setDelegate (FsoFrameworkAbstractWorkerQueue* self, FsoFrameworkAbstractWorkerQueueWorkerFunc worker, void* worker_target);
void fso_framework_abstract_worker_queue_enqueue (FsoFrameworkAbstractWorkerQueue* self, gconstpointer element);
void fso_framework_abstract_worker_queue_trigger (FsoFrameworkAbstractWorkerQueue* self);
GType fso_framework_async_worker_queue_get_type (void) G_GNUC_CONST;
gboolean _fso_framework_async_worker_queue_onIdle (FsoFrameworkAsyncWorkerQueue* self);
FsoFrameworkAsyncWorkerQueue* fso_framework_async_worker_queue_new (GType t_type, GBoxedCopyFunc t_dup_func, GDestroyNotify t_destroy_func);
FsoFrameworkAsyncWorkerQueue* fso_framework_async_worker_queue_construct (GType object_type, GType t_type, GBoxedCopyFunc t_dup_func, GDestroyNotify t_destroy_func);
GType fso_framework_bin_builder_get_type (void) G_GNUC_CONST;
guint8 fso_framework_bin_builder_nth_byte (guint64 val, guint byte);
FsoFrameworkBinBuilder* fso_framework_bin_builder_new (gint alignment, guint8 alignment_byte, GDataStreamByteOrder e);
FsoFrameworkBinBuilder* fso_framework_bin_builder_construct (GType object_type, gint alignment, guint8 alignment_byte, GDataStreamByteOrder e);
void fso_framework_bin_builder_append_string (FsoFrameworkBinBuilder* self, const gchar* s, gboolean include_null_byte, gint pad_to, guint8 padding);
void fso_framework_bin_builder_append_data (FsoFrameworkBinBuilder* self, guint8* d, int d_length1, gint pad_to, guint8 padding);
void fso_framework_bin_builder_append_uint8 (FsoFrameworkBinBuilder* self, guint8 c);
void fso_framework_bin_builder_append_int8 (FsoFrameworkBinBuilder* self, gint8 c);
void fso_framework_bin_builder_append_uint16 (FsoFrameworkBinBuilder* self, guint16 v);
void fso_framework_bin_builder_append_int16 (FsoFrameworkBinBuilder* self, gint16 v);
void fso_framework_bin_builder_append_uint32 (FsoFrameworkBinBuilder* self, guint32 v);
void fso_framework_bin_builder_append_int32 (FsoFrameworkBinBuilder* self, gint32 v);
void fso_framework_bin_builder_append_uint64 (FsoFrameworkBinBuilder* self, guint64 v);
void fso_framework_bin_builder_append_int64 (FsoFrameworkBinBuilder* self, gint64 v);
void fso_framework_bin_builder_append_custom (FsoFrameworkBinBuilder* self, guint64 val, gint size);
void fso_framework_bin_builder_append_pad (FsoFrameworkBinBuilder* self, glong length, guint8 byte);
void fso_framework_bin_builder_append_align (FsoFrameworkBinBuilder* self);
void fso_framework_bin_builder_append_crc16 (FsoFrameworkBinBuilder* self, gint start, gint end);
void fso_framework_bin_builder_append_bitfield (FsoFrameworkBinBuilder* self, gint position, guint64 value, gint offset, gint bit_length, gint byte_length);
void fso_framework_bin_builder_set_uint8 (FsoFrameworkBinBuilder* self, guint8 val, gint position);
void fso_framework_bin_builder_set_uint16 (FsoFrameworkBinBuilder* self, guint16 val, gint position);
void fso_framework_bin_builder_set_uint32 (FsoFrameworkBinBuilder* self, guint32 val, gint position);
void fso_framework_bin_builder_set_uint64 (FsoFrameworkBinBuilder* self, guint64 val, gint position);
void fso_framework_bin_builder_set_string (FsoFrameworkBinBuilder* self, const gchar* s, gint position, gboolean include_null_byte, guint pad_to, guint8 padding);
void fso_framework_bin_builder_set_data (FsoFrameworkBinBuilder* self, guint8* d, int d_length1, gint position, guint pad_to, guint8 padding);
void fso_framework_bin_builder_set_align (FsoFrameworkBinBuilder* self, gint pos);
void fso_framework_bin_builder_set_crc16 (FsoFrameworkBinBuilder* self, gint pos, gint start, gint end);
void fso_framework_bin_builder_insert_uint8 (FsoFrameworkBinBuilder* self, guint8 val, gint position);
void fso_framework_bin_builder_insert_uint16 (FsoFrameworkBinBuilder* self, guint16 val, gint position);
void fso_framework_bin_builder_insert_uint32 (FsoFrameworkBinBuilder* self, guint32 val, gint position);
void fso_framework_bin_builder_insert_uint64 (FsoFrameworkBinBuilder* self, guint64 val, gint position);
void fso_framework_bin_builder_insert_string (FsoFrameworkBinBuilder* self, const gchar* str, gint position);
void fso_framework_bin_builder_insert_data (FsoFrameworkBinBuilder* self, guint8* data, int data_length1, gint position);
void fso_framework_bin_builder_insert_crc16 (FsoFrameworkBinBuilder* self, gint pos, gint start, gint end);
void fso_framework_bin_builder_reset (FsoFrameworkBinBuilder* self);
guint16 fso_framework_bin_builder_uint16_convert (FsoFrameworkBinBuilder* self, guint16 val);
guint32 fso_framework_bin_builder_uint32_convert (FsoFrameworkBinBuilder* self, guint32 val);
guint64 fso_framework_bin_builder_uint64_convert (FsoFrameworkBinBuilder* self, guint64 val);
GList* fso_framework_bin_builder_get_at (FsoFrameworkBinBuilder* self, gint position, guint assure_nth);
guint8* fso_framework_bin_builder_get_data (FsoFrameworkBinBuilder* self, int* result_length1);
guint fso_framework_bin_builder_get_length (FsoFrameworkBinBuilder* self);
GDataStreamByteOrder fso_framework_bin_builder_get_endianess (FsoFrameworkBinBuilder* self);
void fso_framework_bin_builder_set_endianess (FsoFrameworkBinBuilder* self, GDataStreamByteOrder value);
guint fso_framework_bin_builder_get_alignment (FsoFrameworkBinBuilder* self);
void fso_framework_bin_builder_set_alignment (FsoFrameworkBinBuilder* self, guint value);
guint8 fso_framework_bin_builder_get_alignment_byte (FsoFrameworkBinBuilder* self);
void fso_framework_bin_builder_set_alignment_byte (FsoFrameworkBinBuilder* self, guint8 value);
gboolean fso_framework_bin_builder_get_packed (FsoFrameworkBinBuilder* self);
GType fso_framework_bin_reader_get_type (void) G_GNUC_CONST;
FsoFrameworkBinReader* fso_framework_bin_reader_new (guint8* d, int d_length1, gint alignment, GDataStreamByteOrder e);
FsoFrameworkBinReader* fso_framework_bin_reader_construct (GType object_type, guint8* d, int d_length1, gint alignment, GDataStreamByteOrder e);
FsoFrameworkBinReader* fso_framework_bin_reader_new_void_pointer (void* d, guint len, gint alignment, GDataStreamByteOrder e);
FsoFrameworkBinReader* fso_framework_bin_reader_construct_void_pointer (GType object_type, void* d, guint len, gint alignment, GDataStreamByteOrder e);
GQuark fso_framework_bin_reader_error_quark (void);
guint8 fso_framework_bin_reader_get_uint8 (FsoFrameworkBinReader* self, gint pos, GError** error);
guint16 fso_framework_bin_reader_get_uint16 (FsoFrameworkBinReader* self, gint pos, GError** error);
guint32 fso_framework_bin_reader_get_uint32 (FsoFrameworkBinReader* self, gint pos, GError** error);
guint64 fso_framework_bin_reader_get_uint64 (FsoFrameworkBinReader* self, gint pos, GError** error);
gchar* fso_framework_bin_reader_get_string (FsoFrameworkBinReader* self, gint pos, gint length, GError** error);
guint8* fso_framework_bin_reader_get_data (FsoFrameworkBinReader* self, gint pos, gint length, int* result_length1, GError** error);
gboolean fso_framework_bin_reader_crc16_verify (FsoFrameworkBinReader* self, gint crc_position, gint start, gint end, GError** error);
guint64 fso_framework_bin_reader_get_bits (FsoFrameworkBinReader* self, gint position, gint offset, gint length, GError** error);
guint16 fso_framework_bin_reader_uint16_convert (FsoFrameworkBinReader* self, guint16 val);
guint32 fso_framework_bin_reader_uint32_convert (FsoFrameworkBinReader* self, guint32 val);
guint64 fso_framework_bin_reader_uint64_convert (FsoFrameworkBinReader* self, guint64 val);
gint fso_framework_bin_reader_get_alignment (FsoFrameworkBinReader* self);
void fso_framework_bin_reader_set_alignment (FsoFrameworkBinReader* self, gint value);
gboolean fso_framework_bin_reader_get_packed (FsoFrameworkBinReader* self);
GType fso_framework_inotifier_get_type (void) G_GNUC_CONST;
extern FsoFrameworkINotifier* fso_framework_inotifier_instance;
FsoFrameworkINotifier* fso_framework_inotifier_new (void);
FsoFrameworkINotifier* fso_framework_inotifier_construct (GType object_type);
gboolean fso_framework_inotifier_onActionFromInotify (FsoFrameworkINotifier* self, GIOChannel* source, GIOCondition condition);
void fso_framework_inotifier_handleEvent (FsoFrameworkINotifier* self, struct inotify_event* event);
guint _fso_framework_inotifier_add (FsoFrameworkINotifier* self, const gchar* path, int mask, FsoFrameworkINotifyNotifierFunc cb, void* cb_target);
void _fso_framework_inotifier_remove (FsoFrameworkINotifier* self, guint source);
guint fso_framework_inotifier_add (const gchar* path, int mask, FsoFrameworkINotifyNotifierFunc cb, void* cb_target);
void fso_framework_inotifier_remove (guint source);
GType fso_framework_base_kobject_notifier_get_type (void) G_GNUC_CONST;
extern FsoFrameworkBaseKObjectNotifier* fso_framework_base_kobject_notifier_instance;
FsoFrameworkBaseKObjectNotifier* fso_framework_base_kobject_notifier_new (void);
FsoFrameworkBaseKObjectNotifier* fso_framework_base_kobject_notifier_construct (GType object_type);
gboolean fso_framework_base_kobject_notifier_onActionFromSocket (FsoFrameworkBaseKObjectNotifier* self, GIOChannel* source, GIOCondition condition);
void fso_framework_base_kobject_notifier_handleMessage (FsoFrameworkBaseKObjectNotifier* self, gchar** parts, int parts_length1);
void _fso_framework_base_kobject_notifier_addMatch (FsoFrameworkBaseKObjectNotifier* self, const gchar* action, const gchar* subsystem, FsoFrameworkKObjectNotifierFunc callback, void* callback_target);
void fso_framework_base_kobject_notifier_addMatch (const gchar* action, const gchar* subsystem, FsoFrameworkKObjectNotifierFunc callback, void* callback_target);
GType fso_framework_logger_get_type (void) G_GNUC_CONST;
extern FsoFrameworkLogger* fso_framework_theLogger;
GType fso_framework_smart_key_file_get_type (void) G_GNUC_CONST;
extern FsoFrameworkSmartKeyFile* fso_framework_theConfig;
void fso_framework_logger_setLevel (FsoFrameworkLogger* self, GLogLevelFlags level);
void fso_framework_logger_setDestination (FsoFrameworkLogger* self, const gchar* destination);
void fso_framework_logger_setReprDelegate (FsoFrameworkLogger* self, ReprDelegate repr, void* repr_target);
GLogLevelFlags fso_framework_logger_getLevel (FsoFrameworkLogger* self);
gchar* fso_framework_logger_getDestination (FsoFrameworkLogger* self);
gboolean fso_framework_logger_debug (FsoFrameworkLogger* self, const gchar* message);
gboolean fso_framework_logger_info (FsoFrameworkLogger* self, const gchar* message);
gboolean fso_framework_logger_warning (FsoFrameworkLogger* self, const gchar* message);
gboolean fso_framework_logger_error (FsoFrameworkLogger* self, const gchar* message);
gboolean fso_framework_logger_critical (FsoFrameworkLogger* self, const gchar* message);
gboolean fso_framework_logger_data (FsoFrameworkLogger* self, guint8* message, int message_length1, gboolean in, GLogLevelFlags when);
FsoFrameworkLogger* fso_framework_logger_defaultLogger (void);
FsoFrameworkLogger* fso_framework_logger_createLogger (const gchar* group, const gchar* domain);
FsoFrameworkLogger* fso_framework_logger_createFromConfig (const gchar* filename, const gchar* group, const gchar* domain);
FsoFrameworkLogger* fso_framework_logger_createFromKeyFileName (const gchar* filename, const gchar* group, const gchar* domain);
FsoFrameworkLogger* fso_framework_logger_createFromKeyFile (FsoFrameworkSmartKeyFile* smk, const gchar* group, const gchar* domain);
GType fso_framework_abstract_logger_get_type (void) G_GNUC_CONST;
void fso_framework_abstract_logger_write (FsoFrameworkAbstractLogger* self, const gchar* message);
gchar* fso_framework_abstract_logger_colorwrap (FsoFrameworkAbstractLogger* self, const gchar* message, const gchar* level);
gchar* fso_framework_abstract_logger_format (FsoFrameworkAbstractLogger* self, const gchar* message, const gchar* level);
FsoFrameworkAbstractLogger* fso_framework_abstract_logger_construct (GType object_type, const gchar* domain);
void fso_framework_abstract_logger_setColored (FsoFrameworkAbstractLogger* self, gboolean on);
gboolean fso_framework_abstract_logger_getColored (FsoFrameworkAbstractLogger* self);
gchar* fso_framework_abstract_logger_levelToString (GLogLevelFlags level);
GLogLevelFlags fso_framework_abstract_logger_stringToLevel (const gchar* level);
GType fso_framework_null_logger_get_type (void) G_GNUC_CONST;
FsoFrameworkNullLogger* fso_framework_null_logger_new (const gchar* domain);
FsoFrameworkNullLogger* fso_framework_null_logger_construct (GType object_type, const gchar* domain);
GType fso_framework_file_logger_get_type (void) G_GNUC_CONST;
FsoFrameworkFileLogger* fso_framework_file_logger_new (const gchar* domain);
FsoFrameworkFileLogger* fso_framework_file_logger_construct (GType object_type, const gchar* domain);
void fso_framework_file_logger_setFile (FsoFrameworkFileLogger* self, const gchar* filename, gboolean append);
GType fso_framework_std_err_logger_get_type (void) G_GNUC_CONST;
FsoFrameworkStdErrLogger* fso_framework_std_err_logger_new (const gchar* domain);
FsoFrameworkStdErrLogger* fso_framework_std_err_logger_construct (GType object_type, const gchar* domain);
GType fso_framework_syslog_logger_get_type (void) G_GNUC_CONST;
FsoFrameworkSyslogLogger* fso_framework_syslog_logger_new (const gchar* domain);
FsoFrameworkSyslogLogger* fso_framework_syslog_logger_construct (GType object_type, const gchar* domain);
GType fso_framework_kmsg_logger_get_type (void) G_GNUC_CONST;
FsoFrameworkKmsgLogger* fso_framework_kmsg_logger_new (const gchar* domain);
FsoFrameworkKmsgLogger* fso_framework_kmsg_logger_construct (GType object_type, const gchar* domain);
GType glib_logger_get_type (void) G_GNUC_CONST;
GLibLogger* glib_logger_new (FsoFrameworkLogger* logger);
GLibLogger* glib_logger_construct (GType object_type, FsoFrameworkLogger* logger);
void glib_logger_log (GLibLogger* self, const gchar* log_domain, GLogLevelFlags log_level, const gchar* message);
GType fso_framework_base_netlink_notifier_get_type (void) G_GNUC_CONST;
extern FsoFrameworkBaseNetlinkNotifier* fso_framework_base_netlink_notifier_instance;
FsoFrameworkBaseNetlinkNotifier* fso_framework_base_netlink_notifier_new (void);
FsoFrameworkBaseNetlinkNotifier* fso_framework_base_netlink_notifier_construct (GType object_type);
gboolean fso_framework_base_netlink_notifier_onActionFromSocket (FsoFrameworkBaseNetlinkNotifier* self, GIOChannel* source, GIOCondition condition);
gint fso_framework_base_netlink_notifier_handleNetlinkMessage (FsoFrameworkBaseNetlinkNotifier* self, struct nl_msg* msg);
void fso_framework_base_netlink_notifier_handleMessage (FsoFrameworkBaseNetlinkNotifier* self, guint16 type, struct nl_object* obj);
void fso_framework_base_netlink_notifier_fillLinkProperties (FsoFrameworkBaseNetlinkNotifier* self, struct rtnl_link* lnk, GHashTable** properties);
void fso_framework_base_netlink_notifier_fillRouteProperties (FsoFrameworkBaseNetlinkNotifier* self, struct rtnl_route* route, GHashTable** properties);
void fso_framework_base_netlink_notifier_fillAddressProperties (FsoFrameworkBaseNetlinkNotifier* self, struct nl_addr* addr, GHashTable** properties);
void fso_framework_base_netlink_notifier_fillNeighbourProperties (FsoFrameworkBaseNetlinkNotifier* self, struct rtnl_neigh* neigh, GHashTable** properties);
void fso_framework_base_netlink_notifier_fillRuleProperties (FsoFrameworkBaseNetlinkNotifier* self, struct rtnl_rule* rule, GHashTable** properties);
void fso_framework_base_netlink_notifier_fillQdiscProperties (FsoFrameworkBaseNetlinkNotifier* self, struct rtnl_qdisc* qdisc, GHashTable** properties);
void _fso_framework_base_netlink_notifier_addMatch (FsoFrameworkBaseNetlinkNotifier* self, guint16 type, FsoFrameworkNetlinkNotifierFunc callback, void* callback_target);
void fso_framework_base_netlink_notifier_addMatch (guint16 action, FsoFrameworkNetlinkNotifierFunc callback, void* callback_target);
gchar* fso_framework_net_ipv4AddressForInterface (const gchar* iface);
GType fso_framework_overlay_file_get_type (void) G_GNUC_CONST;
FsoFrameworkOverlayFile* fso_framework_overlay_file_new (const gchar* filename, const gchar* newcontent);
FsoFrameworkOverlayFile* fso_framework_overlay_file_construct (GType object_type, const gchar* filename, const gchar* newcontent);
GType fso_framework_iprocess_guard_get_type (void) G_GNUC_CONST;
gboolean fso_framework_iprocess_guard_launch (FsoFrameworkIProcessGuard* self, gchar** command, int command_length1);
void fso_framework_iprocess_guard_stop (FsoFrameworkIProcessGuard* self, gint sig);
void fso_framework_iprocess_guard_setAutoRelaunch (FsoFrameworkIProcessGuard* self, gboolean on);
gboolean fso_framework_iprocess_guard_sendSignal (FsoFrameworkIProcessGuard* self, gint sig);
gboolean fso_framework_iprocess_guard_isRunning (FsoFrameworkIProcessGuard* self);
pid_t fso_framework_process_findByName (const gchar* name);
GType fso_framework_gprocess_guard_get_type (void) G_GNUC_CONST;
pid_t _fso_framework_gprocess_guard_pid (FsoFrameworkGProcessGuard* self);
gboolean fso_framework_gprocess_guard_attach (FsoFrameworkGProcessGuard* self, pid_t pid, gchar** command, int command_length1);
gboolean fso_framework_gprocess_guard_launchWithPipes (FsoFrameworkGProcessGuard* self, gchar** command, int command_length1, gint* fdin, gint* fdout);
FsoFrameworkGProcessGuard* fso_framework_gprocess_guard_new (void);
FsoFrameworkGProcessGuard* fso_framework_gprocess_guard_construct (GType object_type);
GType async_process_get_type (void) G_GNUC_CONST;
void async_process_set_stdout_watch (AsyncProcess* self, GIOFunc watch, void* watch_target, GIOCondition cond, GIOFlags flags);
void async_process_set_stderr_watch (AsyncProcess* self, GIOFunc watch, void* watch_target, GIOCondition cond, GIOFlags flags);
void async_process_launch (AsyncProcess* self, GCancellable* cancel, gchar** argv, int argv_length1, GAsyncReadyCallback _callback_, gpointer _user_data_);
gint async_process_launch_finish (AsyncProcess* self, GAsyncResult* _res_, GError** error);
AsyncProcess* async_process_new (void);
AsyncProcess* async_process_construct (GType object_type);
gint async_process_get_std_in (AsyncProcess* self);
const gchar* async_process_get_cmd_line (AsyncProcess* self);
FsoFrameworkSmartKeyFile* fso_framework_smart_key_file_new (void);
FsoFrameworkSmartKeyFile* fso_framework_smart_key_file_construct (GType object_type);
FsoFrameworkSmartKeyFile* fso_framework_smart_key_file_defaultKeyFile (void);
FsoFrameworkSmartKeyFile* fso_framework_smart_key_file_createFromConfig (const gchar* filename);
gboolean fso_framework_smart_key_file_loadFromFile (FsoFrameworkSmartKeyFile* self, const gchar* filename);
gchar* fso_framework_smart_key_file_stringValue (FsoFrameworkSmartKeyFile* self, const gchar* section_raw, const gchar* key, const gchar* defaultvalue);
gdouble fso_framework_smart_key_file_doubleValue (FsoFrameworkSmartKeyFile* self, const gchar* section_raw, const gchar* key, gdouble defaultvalue);
gint fso_framework_smart_key_file_intValue (FsoFrameworkSmartKeyFile* self, const gchar* section_raw, const gchar* key, gint defaultvalue);
gboolean fso_framework_smart_key_file_boolValue (FsoFrameworkSmartKeyFile* self, const gchar* section_raw, const gchar* key, gboolean defaultvalue);
gchar** fso_framework_smart_key_file_stringListValue (FsoFrameworkSmartKeyFile* self, const gchar* section_raw, const gchar* key, gchar** defaultvalue, int defaultvalue_length1, int* result_length1);
gboolean fso_framework_smart_key_file_hasSection (FsoFrameworkSmartKeyFile* self, const gchar* section_raw);
GList* fso_framework_smart_key_file_sectionsWithPrefix (FsoFrameworkSmartKeyFile* self, const gchar* prefix);
gboolean fso_framework_smart_key_file_hasKey (FsoFrameworkSmartKeyFile* self, const gchar* section_raw, const gchar* key);
GList* fso_framework_smart_key_file_keysWithPrefix (FsoFrameworkSmartKeyFile* self, const gchar* section_raw, const gchar* prefix);
void fso_framework_smart_key_file_write (FsoFrameworkSmartKeyFile* self, GType t_type, GBoxedCopyFunc t_dup_func, GDestroyNotify t_destroy_func, const gchar* section_raw, const gchar* key, gconstpointer value);
GType fso_framework_smart_key_file_section_get_type (void) G_GNUC_CONST;
FsoFrameworkSmartKeyFileSection* fso_framework_smart_key_file_section_openSection (FsoFrameworkSmartKeyFile* kf, const gchar* section);
void fso_framework_asyncWaitSeconds (gint seconds, GAsyncReadyCallback _callback_, gpointer _user_data_);
void fso_framework_asyncWaitSeconds_finish (GAsyncResult* _res_);
GType fso_framework_sync_wrapper_get_type (void) G_GNUC_CONST;
FsoFrameworkSyncWrapper* fso_framework_sync_wrapper_new (GVoidFunc func);
FsoFrameworkSyncWrapper* fso_framework_sync_wrapper_construct (GType object_type, GVoidFunc func);
gboolean fso_framework_sync_wrapper_onIdle (FsoFrameworkSyncWrapper* self);
GType fso_framework_wait_for_predicate_get_type (void) G_GNUC_CONST;
gboolean fso_framework_wait_for_predicate_Wait (guint secs, GSourceFunc func, void* func_target, GDestroyNotify func_target_destroy_notify);
FsoFrameworkWaitForPredicate* fso_framework_wait_for_predicate_new (guint secs, GSourceFunc func, void* func_target, GDestroyNotify func_target_destroy_notify);
FsoFrameworkWaitForPredicate* fso_framework_wait_for_predicate_construct (GType object_type, guint secs, GSourceFunc func, void* func_target, GDestroyNotify func_target_destroy_notify);
gboolean fso_framework_wait_for_predicate_onTimeout (FsoFrameworkWaitForPredicate* self);
gboolean fso_framework_threading_isMainThread (void);
void fso_framework_threading_callDelegateOnMainThread (FsoFrameworkThreadingVoidFuncWithVoidStarParam func, void* func_target, gboolean waitForCompletion, void* param);
void fso_framework_threading_callDelegateOnNewThread (FsoFrameworkThreadingVoidFuncWithVoidStarParam func, void* func_target, void* param);
#define G_SOURCE_CALL_AGAIN TRUE
#define G_SOURCE_CALL_NEVER FALSE
GType fso_framework_ternary_get_type (void) G_GNUC_CONST;
gpointer fso_framework_typed_array_wrapper_ref (gpointer instance);
void fso_framework_typed_array_wrapper_unref (gpointer instance);
GParamSpec* fso_framework_param_spec_typed_array_wrapper (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void fso_framework_value_set_typed_array_wrapper (GValue* value, gpointer v_object);
void fso_framework_value_take_typed_array_wrapper (GValue* value, gpointer v_object);
gpointer fso_framework_value_get_typed_array_wrapper (const GValue* value);
GType fso_framework_typed_array_wrapper_get_type (void) G_GNUC_CONST;
FsoFrameworkTypedArrayWrapper* fso_framework_typed_array_wrapper_new (GType t_type, GBoxedCopyFunc t_dup_func, GDestroyNotify t_destroy_func);
FsoFrameworkTypedArrayWrapper* fso_framework_typed_array_wrapper_construct (GType object_type, GType t_type, GBoxedCopyFunc t_dup_func, GDestroyNotify t_destroy_func);
gpointer fso_framework_pair_ref (gpointer instance);
void fso_framework_pair_unref (gpointer instance);
GParamSpec* fso_framework_param_spec_pair (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void fso_framework_value_set_pair (GValue* value, gpointer v_object);
void fso_framework_value_take_pair (GValue* value, gpointer v_object);
gpointer fso_framework_value_get_pair (const GValue* value);
GType fso_framework_pair_get_type (void) G_GNUC_CONST;
FsoFrameworkPair* fso_framework_pair_new (GType t1_type, GBoxedCopyFunc t1_dup_func, GDestroyNotify t1_destroy_func, GType t2_type, GBoxedCopyFunc t2_dup_func, GDestroyNotify t2_destroy_func, gconstpointer first, gconstpointer second);
FsoFrameworkPair* fso_framework_pair_construct (GType object_type, GType t1_type, GBoxedCopyFunc t1_dup_func, GDestroyNotify t1_destroy_func, GType t2_type, GBoxedCopyFunc t2_dup_func, GDestroyNotify t2_destroy_func, gconstpointer first, gconstpointer second);
gpointer fso_framework_triple_ref (gpointer instance);
void fso_framework_triple_unref (gpointer instance);
GParamSpec* fso_framework_param_spec_triple (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void fso_framework_value_set_triple (GValue* value, gpointer v_object);
void fso_framework_value_take_triple (GValue* value, gpointer v_object);
gpointer fso_framework_value_get_triple (const GValue* value);
GType fso_framework_triple_get_type (void) G_GNUC_CONST;
FsoFrameworkTriple* fso_framework_triple_new (GType t1_type, GBoxedCopyFunc t1_dup_func, GDestroyNotify t1_destroy_func, GType t2_type, GBoxedCopyFunc t2_dup_func, GDestroyNotify t2_destroy_func, GType t3_type, GBoxedCopyFunc t3_dup_func, GDestroyNotify t3_destroy_func, gconstpointer first, gconstpointer second, gconstpointer third);
FsoFrameworkTriple* fso_framework_triple_construct (GType object_type, GType t1_type, GBoxedCopyFunc t1_dup_func, GDestroyNotify t1_destroy_func, GType t2_type, GBoxedCopyFunc t2_dup_func, GDestroyNotify t2_destroy_func, GType t3_type, GBoxedCopyFunc t3_dup_func, GDestroyNotify t3_destroy_func, gconstpointer first, gconstpointer second, gconstpointer third);
gpointer fso_framework_quadtruple_ref (gpointer instance);
void fso_framework_quadtruple_unref (gpointer instance);
GParamSpec* fso_framework_param_spec_quadtruple (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void fso_framework_value_set_quadtruple (GValue* value, gpointer v_object);
void fso_framework_value_take_quadtruple (GValue* value, gpointer v_object);
gpointer fso_framework_value_get_quadtruple (const GValue* value);
GType fso_framework_quadtruple_get_type (void) G_GNUC_CONST;
FsoFrameworkQuadtruple* fso_framework_quadtruple_new (GType t1_type, GBoxedCopyFunc t1_dup_func, GDestroyNotify t1_destroy_func, GType t2_type, GBoxedCopyFunc t2_dup_func, GDestroyNotify t2_destroy_func, GType t3_type, GBoxedCopyFunc t3_dup_func, GDestroyNotify t3_destroy_func, GType t4_type, GBoxedCopyFunc t4_dup_func, GDestroyNotify t4_destroy_func, gconstpointer first, gconstpointer second, gconstpointer third, gconstpointer fourth);
FsoFrameworkQuadtruple* fso_framework_quadtruple_construct (GType object_type, GType t1_type, GBoxedCopyFunc t1_dup_func, GDestroyNotify t1_destroy_func, GType t2_type, GBoxedCopyFunc t2_dup_func, GDestroyNotify t2_destroy_func, GType t3_type, GBoxedCopyFunc t3_dup_func, GDestroyNotify t3_destroy_func, GType t4_type, GBoxedCopyFunc t4_dup_func, GDestroyNotify t4_destroy_func, gconstpointer first, gconstpointer second, gconstpointer third, gconstpointer fourth);
gboolean fso_framework_typeInherits (GType subtype, GType type);
void fso_framework_data_sharing_setValueForKey (const gchar* key, void* val);
void* fso_framework_data_sharing_valueForKey (const gchar* key);
uid_t fso_framework_user_group_handling_uidForUser (const gchar* user);
gid_t fso_framework_user_group_handling_gidForGroup (const gchar* group);
gboolean fso_framework_user_group_handling_switchToUserAndGroup (const gchar* user, const gchar* group);
gchar* fso_framework_utility_programName (void);
gchar* fso_framework_utility_prefixForExecutable (void);
gchar** fso_framework_utility_createBacktrace (int* result_length1);
gchar* fso_framework_utility_firstAvailableProgram (gchar** candidates, int candidates_length1);
gchar* fso_framework_utility_hardware (void);
gchar* fso_framework_utility_machineConfigurationDir (void);
gchar* fso_framework_utility_dataToString (guint8* data, int data_length1, gint limit);
gint fso_framework_utility_copyData (guint8** destination, int* destination_length1, guint8* source, int source_length1, gint limit);
gpointer* fso_framework_utility_listToArray (GType t_type, GBoxedCopyFunc t_dup_func, GDestroyNotify t_destroy_func, GList* list, int* result_length1);
void fso_framework_network_textForUri (const gchar* servername, const gchar* uri, GAsyncReadyCallback _callback_, gpointer _user_data_);
gchar** fso_framework_network_textForUri_finish (GAsyncResult* _res_, int* result_length1, GError** error);
gboolean fso_framework_file_handling_createDirectory (const gchar* filename, mode_t mode);
gboolean fso_framework_file_handling_removeTree (const gchar* path);
gboolean fso_framework_file_handling_isPresent (const gchar* filename);
gchar* fso_framework_file_handling_readIfPresent (const gchar* filename);
gchar** fso_framework_file_handling_listDirectory (const gchar* dirname, int* result_length1);
gchar* fso_framework_file_handling_read (const gchar* filename);
void fso_framework_file_handling_write (const gchar* contents, const gchar* filename, gboolean create);
guint8* fso_framework_file_handling_readContentsOfFile (const gchar* filename, int* result_length1, GError** error);
void fso_framework_file_handling_writeContentsToFile (guint8* buffer, int buffer_length1, const gchar* filename, GError** error);
void fso_framework_file_handling_writeBuffer (void* buffer, gulong length, const gchar* filename, gboolean create);
gchar* fso_framework_string_handling_stringListToString (gchar** list, int list_length1);
gpointer fso_framework_string_handling_enumFromString (GType t_type, GBoxedCopyFunc t_dup_func, GDestroyNotify t_destroy_func, const gchar* value, gconstpointer default_value);
gchar* fso_framework_string_handling_enumToString (GType t_type, GBoxedCopyFunc t_dup_func, GDestroyNotify t_destroy_func, gconstpointer value);
gchar* fso_framework_string_handling_enumToNick (GType t_type, GBoxedCopyFunc t_dup_func, GDestroyNotify t_destroy_func, gconstpointer value);
gpointer fso_framework_string_handling_enumFromName (GType t_type, GBoxedCopyFunc t_dup_func, GDestroyNotify t_destroy_func, const gchar* name);
gpointer fso_framework_string_handling_enumFromNick (GType t_type, GBoxedCopyFunc t_dup_func, GDestroyNotify t_destroy_func, const gchar* nick);
gpointer fso_framework_string_handling_convertEnum (GType f_type, GBoxedCopyFunc f_dup_func, GDestroyNotify f_destroy_func, GType t_type, GBoxedCopyFunc t_dup_func, GDestroyNotify t_destroy_func, gconstpointer from);
GHashTable* fso_framework_string_handling_splitKeyValuePairs (const gchar* str);
gchar* fso_framework_string_handling_hexdump (guint8* array, int array_length1, gint linelength, const gchar* prefix, guchar unknownCharacter);
gchar* fso_framework_string_handling_filterByAllowedCharacters (const gchar* input, const gchar* allowed);
void fso_framework_async_event_fd_free (FsoFrameworkAsyncEventFd* self);
FsoFrameworkAsyncEventFd* fso_framework_async_event_fd_new (guint initvalue, GIOFunc callback, void* callback_target);
FsoFrameworkAsyncEventFd* fso_framework_async_event_fd_new (guint initvalue, GIOFunc callback, void* callback_target);
void fso_framework_async_event_fd_write (FsoFrameworkAsyncEventFd* self, gint count);
guint fso_framework_async_event_fd_read (FsoFrameworkAsyncEventFd* self);
GType fso_framework_async_reactor_channel_get_type (void) G_GNUC_CONST;
FsoFrameworkAsyncReactorChannel* fso_framework_async_reactor_channel_new (gint fd, FsoFrameworkAsyncReactorChannelActionFunc actionfunc, void* actionfunc_target, GDestroyNotify actionfunc_target_destroy_notify, gsize bufferlength);
FsoFrameworkAsyncReactorChannel* fso_framework_async_reactor_channel_construct (GType object_type, gint fd, FsoFrameworkAsyncReactorChannelActionFunc actionfunc, void* actionfunc_target, GDestroyNotify actionfunc_target_destroy_notify, gsize bufferlength);
FsoFrameworkAsyncReactorChannel* fso_framework_async_reactor_channel_new_rewind (gint fd, FsoFrameworkAsyncReactorChannelActionFunc actionfunc, void* actionfunc_target, GDestroyNotify actionfunc_target_destroy_notify, gsize bufferlength);
FsoFrameworkAsyncReactorChannel* fso_framework_async_reactor_channel_construct_rewind (GType object_type, gint fd, FsoFrameworkAsyncReactorChannelActionFunc actionfunc, void* actionfunc_target, GDestroyNotify actionfunc_target_destroy_notify, gsize bufferlength);
gint fso_framework_async_reactor_channel_fileno (FsoFrameworkAsyncReactorChannel* self);
void fso_framework_async_sleep_async (gint timeout, GCancellable* cancellable, GAsyncReadyCallback _callback_, gpointer _user_data_);
void fso_framework_async_sleep_finish (GAsyncResult* _res_);
gpointer fso_framework_kernel26_module_ref (gpointer instance);
void fso_framework_kernel26_module_unref (gpointer instance);
GParamSpec* fso_framework_param_spec_kernel26_module (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void fso_framework_value_set_kernel26_module (GValue* value, gpointer v_object);
void fso_framework_value_take_kernel26_module (GValue* value, gpointer v_object);
gpointer fso_framework_value_get_kernel26_module (const GValue* value);
GType fso_framework_kernel26_module_get_type (void) G_GNUC_CONST;
FsoFrameworkKernel26Module* fso_framework_kernel26_module_new (const gchar* name);
FsoFrameworkKernel26Module* fso_framework_kernel26_module_construct (GType object_type, const gchar* name);
gboolean fso_framework_kernel26_module_load (FsoFrameworkKernel26Module* self);
gboolean fso_framework_kernel26_module_unload (FsoFrameworkKernel26Module* self);
gboolean fso_framework_kernel26_module_get_active (FsoFrameworkKernel26Module* self);
gboolean fso_framework_kernel26_module_get_available (FsoFrameworkKernel26Module* self);
const gchar* fso_framework_kernel26_module_get_name (FsoFrameworkKernel26Module* self);
void fso_framework_kernel26_module_set_name (FsoFrameworkKernel26Module* self, const gchar* value);
const gchar* fso_framework_kernel26_module_get_arguments (FsoFrameworkKernel26Module* self);
void fso_framework_kernel26_module_set_arguments (FsoFrameworkKernel26Module* self, const gchar* value);
guint16 fso_framework_checksum_crc16 (guint8* data, int data_length1);
gboolean fso_framework_checksum_crc16_verify (guint8* data, int data_length1, guint16 expected);
GType fso_framework_abstract_object_get_type (void) G_GNUC_CONST;
gchar* fso_framework_abstract_object_repr (FsoFrameworkAbstractObject* self);
FsoFrameworkAbstractObject* fso_framework_abstract_object_construct (GType object_type);


G_END_DECLS

#endif
