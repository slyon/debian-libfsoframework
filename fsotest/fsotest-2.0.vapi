/* fsotest-2.0.vapi generated by valac 0.16.1, do not modify. */

namespace FsoFramework {
	namespace Test {
		[CCode (cheader_filename = "fsotest.h")]
		public class Assert : GLib.Object {
			public Assert ();
			public static void are_equal<T> (T expected, T actual, string message = "") throws FsoFramework.Test.AssertError;
			public static void are_not_equal<T> (T not_expected, T actual, string message = "") throws FsoFramework.Test.AssertError;
			public static void fail (string message) throws FsoFramework.Test.AssertError;
			public static void is_false (bool actual, string message = "") throws FsoFramework.Test.AssertError;
			public static void is_true (bool actual, string message = "") throws FsoFramework.Test.AssertError;
			public static void should_throw_async (FsoFramework.Test.AsyncBegin fbegin, FsoFramework.Test.AsyncFinish ffinish, string domain, string message = "") throws FsoFramework.Test.AssertError;
		}
		[CCode (cheader_filename = "fsotest.h")]
		public class MultiSignalWaiter : GLib.Object {
			public MultiSignalWaiter ();
			public void add_signal (GLib.Object emitter, string signame, int timeout = 200);
			public bool run (FsoFramework.Test.Block block, int timeout = 200);
		}
		[CCode (cheader_filename = "fsotest.h")]
		public abstract class TestCase : GLib.Object {
			public delegate void TestMethod ();
			public TestCase (string name);
			public void add_async_test (string name, FsoFramework.Test.AsyncBegin async_begin, FsoFramework.Test.AsyncFinish async_finish, int timeout = 200);
			public void add_test (string name, FsoFramework.Test.TestCase.TestMethod test);
			public GLib.TestSuite get_suite ();
			public virtual void set_up ();
			public virtual void tear_down ();
		}
		[CCode (cheader_filename = "fsotest.h")]
		public errordomain AssertError {
			UNEXPECTED_VALUE,
			UNEXPECTED_STATE
		}
		[CCode (cheader_filename = "fsotest.h")]
		public delegate void AsyncBegin (GLib.AsyncReadyCallback callback);
		[CCode (cheader_filename = "fsotest.h")]
		public delegate void AsyncFinish (GLib.AsyncResult result) throws GLib.Error;
		[CCode (cheader_filename = "fsotest.h")]
		public delegate void Block ();
		[CCode (cheader_filename = "fsotest.h")]
		public delegate void CancelableAsyncBegin (GLib.Cancellable cancel, GLib.AsyncReadyCallback callback);
		[CCode (cheader_filename = "fsotest.h")]
		public delegate bool Predicate ();
		[CCode (cheader_filename = "fsotest.h")]
		public static bool wait_for_async (int timeout, FsoFramework.Test.AsyncBegin async_function, FsoFramework.Test.AsyncFinish async_finish) throws GLib.Error;
		[CCode (cheader_filename = "fsotest.h")]
		public static bool wait_for_cancellable_async (int timeout, FsoFramework.Test.CancelableAsyncBegin async_function, FsoFramework.Test.AsyncFinish async_finish) throws GLib.Error;
		[CCode (cheader_filename = "fsotest.h")]
		public static bool wait_for_condition (int timeout, GLib.Object emitter, string signame, owned FsoFramework.Test.Predicate predicate, FsoFramework.Test.Block block);
		[CCode (cheader_filename = "fsotest.h")]
		public static bool wait_for_signal (int timeout, GLib.Object emitter, string signame, FsoFramework.Test.Block block);
	}
}
