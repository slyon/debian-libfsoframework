/* fsoframework.h generated by valac 0.16.0, the Vala compiler, do not modify */


#ifndef __FSOFRAMEWORK_H__
#define __FSOFRAMEWORK_H__

#include <glib.h>
#include <stdlib.h>
#include <string.h>
#include <glib-object.h>
#include <gio/gio.h>
#include <fsobasics.h>

G_BEGIN_DECLS


#define DBUS_SERVICE_TYPE_IINTROSPECTABLE (dbus_service_iintrospectable_get_type ())
#define DBUS_SERVICE_IINTROSPECTABLE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), DBUS_SERVICE_TYPE_IINTROSPECTABLE, DBusServiceIIntrospectable))
#define DBUS_SERVICE_IS_IINTROSPECTABLE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), DBUS_SERVICE_TYPE_IINTROSPECTABLE))
#define DBUS_SERVICE_IINTROSPECTABLE_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), DBUS_SERVICE_TYPE_IINTROSPECTABLE, DBusServiceIIntrospectableIface))

typedef struct _DBusServiceIIntrospectable DBusServiceIIntrospectable;
typedef struct _DBusServiceIIntrospectableIface DBusServiceIIntrospectableIface;

#define DBUS_SERVICE_TYPE_IINTROSPECTABLE_PROXY (dbus_service_iintrospectable_proxy_get_type ())

#define DBUS_SERVICE_TYPE_IPROPERTIES (dbus_service_iproperties_get_type ())
#define DBUS_SERVICE_IPROPERTIES(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), DBUS_SERVICE_TYPE_IPROPERTIES, DBusServiceIProperties))
#define DBUS_SERVICE_IS_IPROPERTIES(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), DBUS_SERVICE_TYPE_IPROPERTIES))
#define DBUS_SERVICE_IPROPERTIES_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), DBUS_SERVICE_TYPE_IPROPERTIES, DBusServiceIPropertiesIface))

typedef struct _DBusServiceIProperties DBusServiceIProperties;
typedef struct _DBusServiceIPropertiesIface DBusServiceIPropertiesIface;

#define DBUS_SERVICE_TYPE_IPROPERTIES_PROXY (dbus_service_iproperties_proxy_get_type ())

#define DBUS_SERVICE_TYPE_IPEER (dbus_service_ipeer_get_type ())
#define DBUS_SERVICE_IPEER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), DBUS_SERVICE_TYPE_IPEER, DBusServiceIPeer))
#define DBUS_SERVICE_IS_IPEER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), DBUS_SERVICE_TYPE_IPEER))
#define DBUS_SERVICE_IPEER_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), DBUS_SERVICE_TYPE_IPEER, DBusServiceIPeerIface))

typedef struct _DBusServiceIPeer DBusServiceIPeer;
typedef struct _DBusServiceIPeerIface DBusServiceIPeerIface;

#define DBUS_SERVICE_TYPE_IPEER_PROXY (dbus_service_ipeer_proxy_get_type ())

#define DBUS_SERVICE_TYPE_ID_BUS (dbus_service_id_bus_get_type ())
#define DBUS_SERVICE_ID_BUS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), DBUS_SERVICE_TYPE_ID_BUS, DBusServiceIDBus))
#define DBUS_SERVICE_IS_ID_BUS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), DBUS_SERVICE_TYPE_ID_BUS))
#define DBUS_SERVICE_ID_BUS_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), DBUS_SERVICE_TYPE_ID_BUS, DBusServiceIDBusIface))

typedef struct _DBusServiceIDBus DBusServiceIDBus;
typedef struct _DBusServiceIDBusIface DBusServiceIDBusIface;

#define DBUS_SERVICE_TYPE_ID_BUS_PROXY (dbus_service_id_bus_proxy_get_type ())

#define DBUS_SERVICE_TYPE_ID_BUS_SYNC (dbus_service_id_bus_sync_get_type ())
#define DBUS_SERVICE_ID_BUS_SYNC(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), DBUS_SERVICE_TYPE_ID_BUS_SYNC, DBusServiceIDBusSync))
#define DBUS_SERVICE_IS_ID_BUS_SYNC(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), DBUS_SERVICE_TYPE_ID_BUS_SYNC))
#define DBUS_SERVICE_ID_BUS_SYNC_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), DBUS_SERVICE_TYPE_ID_BUS_SYNC, DBusServiceIDBusSyncIface))

typedef struct _DBusServiceIDBusSync DBusServiceIDBusSync;
typedef struct _DBusServiceIDBusSyncIface DBusServiceIDBusSyncIface;

#define DBUS_SERVICE_TYPE_ID_BUS_SYNC_PROXY (dbus_service_id_bus_sync_proxy_get_type ())

#define FSO_FRAMEWORK_TYPE_DBUS_SERVICE_NOTIFIER (fso_framework_dbus_service_notifier_get_type ())
#define FSO_FRAMEWORK_DBUS_SERVICE_NOTIFIER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FSO_FRAMEWORK_TYPE_DBUS_SERVICE_NOTIFIER, FsoFrameworkDBusServiceNotifier))
#define FSO_FRAMEWORK_DBUS_SERVICE_NOTIFIER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), FSO_FRAMEWORK_TYPE_DBUS_SERVICE_NOTIFIER, FsoFrameworkDBusServiceNotifierClass))
#define FSO_FRAMEWORK_IS_DBUS_SERVICE_NOTIFIER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FSO_FRAMEWORK_TYPE_DBUS_SERVICE_NOTIFIER))
#define FSO_FRAMEWORK_IS_DBUS_SERVICE_NOTIFIER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), FSO_FRAMEWORK_TYPE_DBUS_SERVICE_NOTIFIER))
#define FSO_FRAMEWORK_DBUS_SERVICE_NOTIFIER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), FSO_FRAMEWORK_TYPE_DBUS_SERVICE_NOTIFIER, FsoFrameworkDBusServiceNotifierClass))

typedef struct _FsoFrameworkDBusServiceNotifier FsoFrameworkDBusServiceNotifier;
typedef struct _FsoFrameworkDBusServiceNotifierClass FsoFrameworkDBusServiceNotifierClass;
typedef struct _FsoFrameworkDBusServiceNotifierPrivate FsoFrameworkDBusServiceNotifierPrivate;

#define FSO_FRAMEWORK_TYPE_SUBSYSTEM (fso_framework_subsystem_get_type ())
#define FSO_FRAMEWORK_SUBSYSTEM(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FSO_FRAMEWORK_TYPE_SUBSYSTEM, FsoFrameworkSubsystem))
#define FSO_FRAMEWORK_IS_SUBSYSTEM(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FSO_FRAMEWORK_TYPE_SUBSYSTEM))
#define FSO_FRAMEWORK_SUBSYSTEM_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), FSO_FRAMEWORK_TYPE_SUBSYSTEM, FsoFrameworkSubsystemIface))

typedef struct _FsoFrameworkSubsystem FsoFrameworkSubsystem;
typedef struct _FsoFrameworkSubsystemIface FsoFrameworkSubsystemIface;

#define FSO_FRAMEWORK_TYPE_PLUGIN_INFO (fso_framework_plugin_info_get_type ())
typedef struct _FsoFrameworkPluginInfo FsoFrameworkPluginInfo;

#define FSO_FRAMEWORK_TYPE_PLUGIN (fso_framework_plugin_get_type ())
#define FSO_FRAMEWORK_PLUGIN(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FSO_FRAMEWORK_TYPE_PLUGIN, FsoFrameworkPlugin))
#define FSO_FRAMEWORK_IS_PLUGIN(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FSO_FRAMEWORK_TYPE_PLUGIN))
#define FSO_FRAMEWORK_PLUGIN_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), FSO_FRAMEWORK_TYPE_PLUGIN, FsoFrameworkPluginIface))

typedef struct _FsoFrameworkPlugin FsoFrameworkPlugin;
typedef struct _FsoFrameworkPluginIface FsoFrameworkPluginIface;

#define FSO_FRAMEWORK_TYPE_BASE_PLUGIN (fso_framework_base_plugin_get_type ())
#define FSO_FRAMEWORK_BASE_PLUGIN(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FSO_FRAMEWORK_TYPE_BASE_PLUGIN, FsoFrameworkBasePlugin))
#define FSO_FRAMEWORK_BASE_PLUGIN_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), FSO_FRAMEWORK_TYPE_BASE_PLUGIN, FsoFrameworkBasePluginClass))
#define FSO_FRAMEWORK_IS_BASE_PLUGIN(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FSO_FRAMEWORK_TYPE_BASE_PLUGIN))
#define FSO_FRAMEWORK_IS_BASE_PLUGIN_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), FSO_FRAMEWORK_TYPE_BASE_PLUGIN))
#define FSO_FRAMEWORK_BASE_PLUGIN_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), FSO_FRAMEWORK_TYPE_BASE_PLUGIN, FsoFrameworkBasePluginClass))

typedef struct _FsoFrameworkBasePlugin FsoFrameworkBasePlugin;
typedef struct _FsoFrameworkBasePluginClass FsoFrameworkBasePluginClass;
typedef struct _FsoFrameworkBasePluginPrivate FsoFrameworkBasePluginPrivate;

#define FSO_FRAMEWORK_TYPE_RESOURCE_STATUS (fso_framework_resource_status_get_type ())

#define FSO_FRAMEWORK_TYPE_ABSTRACT_SUBSYSTEM (fso_framework_abstract_subsystem_get_type ())
#define FSO_FRAMEWORK_ABSTRACT_SUBSYSTEM(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FSO_FRAMEWORK_TYPE_ABSTRACT_SUBSYSTEM, FsoFrameworkAbstractSubsystem))
#define FSO_FRAMEWORK_ABSTRACT_SUBSYSTEM_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), FSO_FRAMEWORK_TYPE_ABSTRACT_SUBSYSTEM, FsoFrameworkAbstractSubsystemClass))
#define FSO_FRAMEWORK_IS_ABSTRACT_SUBSYSTEM(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FSO_FRAMEWORK_TYPE_ABSTRACT_SUBSYSTEM))
#define FSO_FRAMEWORK_IS_ABSTRACT_SUBSYSTEM_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), FSO_FRAMEWORK_TYPE_ABSTRACT_SUBSYSTEM))
#define FSO_FRAMEWORK_ABSTRACT_SUBSYSTEM_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), FSO_FRAMEWORK_TYPE_ABSTRACT_SUBSYSTEM, FsoFrameworkAbstractSubsystemClass))

typedef struct _FsoFrameworkAbstractSubsystem FsoFrameworkAbstractSubsystem;
typedef struct _FsoFrameworkAbstractSubsystemClass FsoFrameworkAbstractSubsystemClass;
typedef struct _FsoFrameworkAbstractSubsystemPrivate FsoFrameworkAbstractSubsystemPrivate;

#define FSO_FRAMEWORK_TYPE_BASE_SUBSYSTEM (fso_framework_base_subsystem_get_type ())
#define FSO_FRAMEWORK_BASE_SUBSYSTEM(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FSO_FRAMEWORK_TYPE_BASE_SUBSYSTEM, FsoFrameworkBaseSubsystem))
#define FSO_FRAMEWORK_BASE_SUBSYSTEM_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), FSO_FRAMEWORK_TYPE_BASE_SUBSYSTEM, FsoFrameworkBaseSubsystemClass))
#define FSO_FRAMEWORK_IS_BASE_SUBSYSTEM(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FSO_FRAMEWORK_TYPE_BASE_SUBSYSTEM))
#define FSO_FRAMEWORK_IS_BASE_SUBSYSTEM_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), FSO_FRAMEWORK_TYPE_BASE_SUBSYSTEM))
#define FSO_FRAMEWORK_BASE_SUBSYSTEM_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), FSO_FRAMEWORK_TYPE_BASE_SUBSYSTEM, FsoFrameworkBaseSubsystemClass))

typedef struct _FsoFrameworkBaseSubsystem FsoFrameworkBaseSubsystem;
typedef struct _FsoFrameworkBaseSubsystemClass FsoFrameworkBaseSubsystemClass;
typedef struct _FsoFrameworkBaseSubsystemPrivate FsoFrameworkBaseSubsystemPrivate;

#define FSO_FRAMEWORK_TYPE_DBUS_EXPORT_OBJECT (fso_framework_dbus_export_object_get_type ())
#define FSO_FRAMEWORK_DBUS_EXPORT_OBJECT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FSO_FRAMEWORK_TYPE_DBUS_EXPORT_OBJECT, FsoFrameworkDBusExportObject))
#define FSO_FRAMEWORK_DBUS_EXPORT_OBJECT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), FSO_FRAMEWORK_TYPE_DBUS_EXPORT_OBJECT, FsoFrameworkDBusExportObjectClass))
#define FSO_FRAMEWORK_IS_DBUS_EXPORT_OBJECT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FSO_FRAMEWORK_TYPE_DBUS_EXPORT_OBJECT))
#define FSO_FRAMEWORK_IS_DBUS_EXPORT_OBJECT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), FSO_FRAMEWORK_TYPE_DBUS_EXPORT_OBJECT))
#define FSO_FRAMEWORK_DBUS_EXPORT_OBJECT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), FSO_FRAMEWORK_TYPE_DBUS_EXPORT_OBJECT, FsoFrameworkDBusExportObjectClass))

typedef struct _FsoFrameworkDBusExportObject FsoFrameworkDBusExportObject;
typedef struct _FsoFrameworkDBusExportObjectClass FsoFrameworkDBusExportObjectClass;
typedef struct _FsoFrameworkDBusExportObjectPrivate FsoFrameworkDBusExportObjectPrivate;

#define FSO_FRAMEWORK_TYPE_DBUS_SUBSYSTEM (fso_framework_dbus_subsystem_get_type ())
#define FSO_FRAMEWORK_DBUS_SUBSYSTEM(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FSO_FRAMEWORK_TYPE_DBUS_SUBSYSTEM, FsoFrameworkDBusSubsystem))
#define FSO_FRAMEWORK_DBUS_SUBSYSTEM_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), FSO_FRAMEWORK_TYPE_DBUS_SUBSYSTEM, FsoFrameworkDBusSubsystemClass))
#define FSO_FRAMEWORK_IS_DBUS_SUBSYSTEM(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FSO_FRAMEWORK_TYPE_DBUS_SUBSYSTEM))
#define FSO_FRAMEWORK_IS_DBUS_SUBSYSTEM_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), FSO_FRAMEWORK_TYPE_DBUS_SUBSYSTEM))
#define FSO_FRAMEWORK_DBUS_SUBSYSTEM_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), FSO_FRAMEWORK_TYPE_DBUS_SUBSYSTEM, FsoFrameworkDBusSubsystemClass))

typedef struct _FsoFrameworkDBusSubsystem FsoFrameworkDBusSubsystem;
typedef struct _FsoFrameworkDBusSubsystemClass FsoFrameworkDBusSubsystemClass;
typedef struct _FsoFrameworkDBusSubsystemPrivate FsoFrameworkDBusSubsystemPrivate;

struct _DBusServiceIIntrospectableIface {
	GTypeInterface parent_iface;
	void (*Introspect) (DBusServiceIIntrospectable* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
	gchar* (*Introspect_finish) (DBusServiceIIntrospectable* self, GAsyncResult* _res_, GError** error);
};

struct _DBusServiceIPropertiesIface {
	GTypeInterface parent_iface;
	void (*Get) (DBusServiceIProperties* self, const gchar* iface, const gchar* prop, GAsyncReadyCallback _callback_, gpointer _user_data_);
	GVariant* (*Get_finish) (DBusServiceIProperties* self, GAsyncResult* _res_, GError** error);
	void (*Set) (DBusServiceIProperties* self, const gchar* iface, const gchar* prop, GVariant* val, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*Set_finish) (DBusServiceIProperties* self, GAsyncResult* _res_, GError** error);
	void (*GetAll) (DBusServiceIProperties* self, const gchar* iface, GAsyncReadyCallback _callback_, gpointer _user_data_);
	GHashTable* (*GetAll_finish) (DBusServiceIProperties* self, GAsyncResult* _res_, GError** error);
};

struct _DBusServiceIPeerIface {
	GTypeInterface parent_iface;
	void (*Ping) (DBusServiceIPeer* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*Ping_finish) (DBusServiceIPeer* self, GAsyncResult* _res_, GError** error);
};

struct _DBusServiceIDBusIface {
	GTypeInterface parent_iface;
	void (*AddMatch) (DBusServiceIDBus* self, const gchar* match, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*AddMatch_finish) (DBusServiceIDBus* self, GAsyncResult* _res_, GError** error);
	void (*GetAdtAuditSessionData) (DBusServiceIDBus* self, const gchar* type, GAsyncReadyCallback _callback_, gpointer _user_data_);
	guint8* (*GetAdtAuditSessionData_finish) (DBusServiceIDBus* self, GAsyncResult* _res_, int* result_length1, GError** error);
	void (*GetConnectionSELinuxSecurityContext) (DBusServiceIDBus* self, const gchar* type, GAsyncReadyCallback _callback_, gpointer _user_data_);
	guint8* (*GetConnectionSELinuxSecurityContext_finish) (DBusServiceIDBus* self, GAsyncResult* _res_, int* result_length1, GError** error);
	void (*GetConnectionUnixProcessID) (DBusServiceIDBus* self, const gchar* conn, GAsyncReadyCallback _callback_, gpointer _user_data_);
	guint32 (*GetConnectionUnixProcessID_finish) (DBusServiceIDBus* self, GAsyncResult* _res_, GError** error);
	void (*GetConnectionUnixUser) (DBusServiceIDBus* self, const gchar* conn, GAsyncReadyCallback _callback_, gpointer _user_data_);
	guint32 (*GetConnectionUnixUser_finish) (DBusServiceIDBus* self, GAsyncResult* _res_, GError** error);
	void (*GetId) (DBusServiceIDBus* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
	gchar* (*GetId_finish) (DBusServiceIDBus* self, GAsyncResult* _res_, GError** error);
	void (*GetNameOwner) (DBusServiceIDBus* self, const gchar* name, GAsyncReadyCallback _callback_, gpointer _user_data_);
	gchar* (*GetNameOwner_finish) (DBusServiceIDBus* self, GAsyncResult* _res_, GError** error);
	void (*Hello) (DBusServiceIDBus* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
	gchar* (*Hello_finish) (DBusServiceIDBus* self, GAsyncResult* _res_, GError** error);
	void (*ListActivatableNames) (DBusServiceIDBus* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
	gchar** (*ListActivatableNames_finish) (DBusServiceIDBus* self, GAsyncResult* _res_, int* result_length1, GError** error);
	void (*ListNames) (DBusServiceIDBus* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
	gchar** (*ListNames_finish) (DBusServiceIDBus* self, GAsyncResult* _res_, int* result_length1, GError** error);
	void (*ListQueuedOwners) (DBusServiceIDBus* self, const gchar* None, GAsyncReadyCallback _callback_, gpointer _user_data_);
	gchar** (*ListQueuedOwners_finish) (DBusServiceIDBus* self, GAsyncResult* _res_, int* result_length1, GError** error);
	void (*NameHasOwner) (DBusServiceIDBus* self, const gchar* name, GAsyncReadyCallback _callback_, gpointer _user_data_);
	gboolean (*NameHasOwner_finish) (DBusServiceIDBus* self, GAsyncResult* _res_, GError** error);
	void (*ReleaseName) (DBusServiceIDBus* self, const gchar* name, GAsyncReadyCallback _callback_, gpointer _user_data_);
	guint32 (*ReleaseName_finish) (DBusServiceIDBus* self, GAsyncResult* _res_, GError** error);
	void (*ReloadConfig) (DBusServiceIDBus* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*ReloadConfig_finish) (DBusServiceIDBus* self, GAsyncResult* _res_, GError** error);
	void (*RemoveMatch) (DBusServiceIDBus* self, const gchar* match, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*RemoveMatch_finish) (DBusServiceIDBus* self, GAsyncResult* _res_, GError** error);
	void (*RequestName) (DBusServiceIDBus* self, const gchar* name, guint32 flags, GAsyncReadyCallback _callback_, gpointer _user_data_);
	guint32 (*RequestName_finish) (DBusServiceIDBus* self, GAsyncResult* _res_, GError** error);
	void (*StartServiceByName) (DBusServiceIDBus* self, const gchar* name, guint32 flags, GAsyncReadyCallback _callback_, gpointer _user_data_);
	guint32 (*StartServiceByName_finish) (DBusServiceIDBus* self, GAsyncResult* _res_, GError** error);
	void (*UpdateActivationEnvironment) (DBusServiceIDBus* self, GHashTable* environment, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*UpdateActivationEnvironment_finish) (DBusServiceIDBus* self, GAsyncResult* _res_, GError** error);
};

struct _DBusServiceIDBusSyncIface {
	GTypeInterface parent_iface;
	void (*AddMatch) (DBusServiceIDBusSync* self, const gchar* match, GError** error);
	guint8* (*GetAdtAuditSessionData) (DBusServiceIDBusSync* self, const gchar* type, int* result_length1, GError** error);
	guint8* (*GetConnectionSELinuxSecurityContext) (DBusServiceIDBusSync* self, const gchar* type, int* result_length1, GError** error);
	guint32 (*GetConnectionUnixProcessID) (DBusServiceIDBusSync* self, const gchar* conn, GError** error);
	guint32 (*GetConnectionUnixUser) (DBusServiceIDBusSync* self, const gchar* conn, GError** error);
	gchar* (*GetId) (DBusServiceIDBusSync* self, GError** error);
	gchar* (*GetNameOwner) (DBusServiceIDBusSync* self, const gchar* name, GError** error);
	gchar* (*Hello) (DBusServiceIDBusSync* self, GError** error);
	gchar** (*ListActivatableNames) (DBusServiceIDBusSync* self, int* result_length1, GError** error);
	gchar** (*ListNames) (DBusServiceIDBusSync* self, int* result_length1, GError** error);
	gchar** (*ListQueuedOwners) (DBusServiceIDBusSync* self, const gchar* None, int* result_length1, GError** error);
	gboolean (*NameHasOwner) (DBusServiceIDBusSync* self, const gchar* name, GError** error);
	guint32 (*ReleaseName) (DBusServiceIDBusSync* self, const gchar* name, GError** error);
	void (*ReloadConfig) (DBusServiceIDBusSync* self, GError** error);
	void (*RemoveMatch) (DBusServiceIDBusSync* self, const gchar* match, GError** error);
	guint32 (*RequestName) (DBusServiceIDBusSync* self, const gchar* name, guint32 flags, GError** error);
	guint32 (*StartServiceByName) (DBusServiceIDBusSync* self, const gchar* name, guint32 flags, GError** error);
	void (*UpdateActivationEnvironment) (DBusServiceIDBusSync* self, GHashTable* environment, GError** error);
};

typedef void (*FsoFrameworkDBusServiceEventFunc) (const gchar* busname, void* user_data);
struct _FsoFrameworkDBusServiceNotifier {
	FsoFrameworkAbstractObject parent_instance;
	FsoFrameworkDBusServiceNotifierPrivate * priv;
};

struct _FsoFrameworkDBusServiceNotifierClass {
	FsoFrameworkAbstractObjectClass parent_class;
};

typedef enum  {
	FSO_FRAMEWORK_PLUGIN_ERROR_UNABLE_TO_LOAD,
	FSO_FRAMEWORK_PLUGIN_ERROR_REGISTER_NOT_FOUND,
	FSO_FRAMEWORK_PLUGIN_ERROR_FACTORY_NOT_FOUND,
	FSO_FRAMEWORK_PLUGIN_ERROR_UNABLE_TO_INITIALIZE
} FsoFrameworkPluginError;
#define FSO_FRAMEWORK_PLUGIN_ERROR fso_framework_plugin_error_quark ()
typedef void (*FsoFrameworkRegisterFunc) (GTypeModule* bar);
struct _FsoFrameworkPluginInfo {
	gchar* name;
	gboolean loaded;
};

struct _FsoFrameworkSubsystemIface {
	GTypeInterface parent_iface;
	guint (*registerPlugins) (FsoFrameworkSubsystem* self);
	guint (*loadPlugins) (FsoFrameworkSubsystem* self);
	gchar* (*name) (FsoFrameworkSubsystem* self);
	GList* (*pluginsInfo) (FsoFrameworkSubsystem* self);
	void (*registerObjectForService) (FsoFrameworkSubsystem* self, GType t_type, GBoxedCopyFunc t_dup_func, GDestroyNotify t_destroy_func, const gchar* servicename, const gchar* objectpath, gconstpointer obj);
	void (*registerObjectForServiceWithPrefix) (FsoFrameworkSubsystem* self, GType t_type, GBoxedCopyFunc t_dup_func, GDestroyNotify t_destroy_func, const gchar* servicename, const gchar* prefixpath, gconstpointer obj);
	void (*unregisterObjectForService) (FsoFrameworkSubsystem* self, GType t_type, GBoxedCopyFunc t_dup_func, GDestroyNotify t_destroy_func, const gchar* servicename, const gchar* objectpath);
	GObject** (*allObjectsWithPrefix) (FsoFrameworkSubsystem* self, const gchar* prefix, int* result_length1);
	void (*shutdown) (FsoFrameworkSubsystem* self);
};

typedef gchar* (*FsoFrameworkFactoryFunc) (FsoFrameworkSubsystem* subsystem, GError** error);
typedef void (*FsoFrameworkShutdownFunc) ();
struct _FsoFrameworkPluginIface {
	GTypeInterface parent_iface;
	void (*loadAndInit) (FsoFrameworkPlugin* self, GError** error);
	void (*info) (FsoFrameworkPlugin* self, FsoFrameworkPluginInfo* result);
	void (*shutdown) (FsoFrameworkPlugin* self);
};

struct _FsoFrameworkBasePlugin {
	GTypeModule parent_instance;
	FsoFrameworkBasePluginPrivate * priv;
};

struct _FsoFrameworkBasePluginClass {
	GTypeModuleClass parent_class;
};

typedef enum  {
	FSO_FRAMEWORK_RESOURCE_STATUS_UNKNOWN,
	FSO_FRAMEWORK_RESOURCE_STATUS_ENABLING,
	FSO_FRAMEWORK_RESOURCE_STATUS_ENABLED,
	FSO_FRAMEWORK_RESOURCE_STATUS_SUSPENDING,
	FSO_FRAMEWORK_RESOURCE_STATUS_SUSPENDED,
	FSO_FRAMEWORK_RESOURCE_STATUS_RESUMING,
	FSO_FRAMEWORK_RESOURCE_STATUS_DISABLING,
	FSO_FRAMEWORK_RESOURCE_STATUS_DISABLED
} FsoFrameworkResourceStatus;

struct _FsoFrameworkAbstractSubsystem {
	GObject parent_instance;
	FsoFrameworkAbstractSubsystemPrivate * priv;
	FsoFrameworkLogger* logger;
};

struct _FsoFrameworkAbstractSubsystemClass {
	GObjectClass parent_class;
	void (*registerObjectForService) (FsoFrameworkAbstractSubsystem* self, GType t_type, GBoxedCopyFunc t_dup_func, GDestroyNotify t_destroy_func, const gchar* servicename, const gchar* objectpath, gconstpointer obj);
	void (*registerObjectForServiceWithPrefix) (FsoFrameworkAbstractSubsystem* self, GType t_type, GBoxedCopyFunc t_dup_func, GDestroyNotify t_destroy_func, const gchar* servicename, const gchar* prefixpath, gconstpointer obj);
	gboolean (*registerServiceObjectWithPrefix) (FsoFrameworkAbstractSubsystem* self, const gchar* servicename, const gchar* prefix, GObject* obj);
	GObject** (*allObjectsWithPrefix) (FsoFrameworkAbstractSubsystem* self, const gchar* prefix, int* result_length1);
	void (*unregisterObjectForService) (FsoFrameworkAbstractSubsystem* self, GType t_type, GBoxedCopyFunc t_dup_func, GDestroyNotify t_destroy_func, const gchar* servicename, const gchar* objectpath);
};

struct _FsoFrameworkBaseSubsystem {
	FsoFrameworkAbstractSubsystem parent_instance;
	FsoFrameworkBaseSubsystemPrivate * priv;
};

struct _FsoFrameworkBaseSubsystemClass {
	FsoFrameworkAbstractSubsystemClass parent_class;
};

struct _FsoFrameworkDBusExportObject {
	GTypeInstance parent_instance;
	volatile int ref_count;
	FsoFrameworkDBusExportObjectPrivate * priv;
	GObject* object;
	gint* registrations;
	gint registrations_length1;
};

struct _FsoFrameworkDBusExportObjectClass {
	GTypeClass parent_class;
	void (*finalize) (FsoFrameworkDBusExportObject *self);
};

struct _FsoFrameworkDBusSubsystem {
	FsoFrameworkAbstractSubsystem parent_instance;
	FsoFrameworkDBusSubsystemPrivate * priv;
};

struct _FsoFrameworkDBusSubsystemClass {
	FsoFrameworkAbstractSubsystemClass parent_class;
};


#define DBUS_SERVICE_DBUS_SERVICE_DBUS "org.freedesktop.DBus"
#define DBUS_SERVICE_DBUS_PATH_DBUS "/org/freedesktop/DBus"
#define DBUS_SERVICE_DBUS_INTERFACE_INTROSPECTABLE "org.freedesktop.DBus.Introspectable"
#define DBUS_SERVICE_DBUS_INTERFACE_PROPERTIES "org.freedesktop.DBus.Properties"
#define DBUS_SERVICE_DBUS_INTERFACE_PEER "org.freedesktop.DBus.Peer"
#define DBUS_SERVICE_DBUS_INTERFACE_DBUS "org.freedesktop.DBus"
GType dbus_service_iintrospectable_proxy_get_type (void) G_GNUC_CONST;
guint dbus_service_iintrospectable_register_object (void* object, GDBusConnection* connection, const gchar* path, GError** error);
GType dbus_service_iintrospectable_get_type (void) G_GNUC_CONST;
void dbus_service_iintrospectable_Introspect (DBusServiceIIntrospectable* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
gchar* dbus_service_iintrospectable_Introspect_finish (DBusServiceIIntrospectable* self, GAsyncResult* _res_, GError** error);
GType dbus_service_iproperties_proxy_get_type (void) G_GNUC_CONST;
guint dbus_service_iproperties_register_object (void* object, GDBusConnection* connection, const gchar* path, GError** error);
GType dbus_service_iproperties_get_type (void) G_GNUC_CONST;
void dbus_service_iproperties_Get (DBusServiceIProperties* self, const gchar* iface, const gchar* prop, GAsyncReadyCallback _callback_, gpointer _user_data_);
GVariant* dbus_service_iproperties_Get_finish (DBusServiceIProperties* self, GAsyncResult* _res_, GError** error);
void dbus_service_iproperties_Set (DBusServiceIProperties* self, const gchar* iface, const gchar* prop, GVariant* val, GAsyncReadyCallback _callback_, gpointer _user_data_);
void dbus_service_iproperties_Set_finish (DBusServiceIProperties* self, GAsyncResult* _res_, GError** error);
void dbus_service_iproperties_GetAll (DBusServiceIProperties* self, const gchar* iface, GAsyncReadyCallback _callback_, gpointer _user_data_);
GHashTable* dbus_service_iproperties_GetAll_finish (DBusServiceIProperties* self, GAsyncResult* _res_, GError** error);
GType dbus_service_ipeer_proxy_get_type (void) G_GNUC_CONST;
guint dbus_service_ipeer_register_object (void* object, GDBusConnection* connection, const gchar* path, GError** error);
GType dbus_service_ipeer_get_type (void) G_GNUC_CONST;
void dbus_service_ipeer_Ping (DBusServiceIPeer* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
void dbus_service_ipeer_Ping_finish (DBusServiceIPeer* self, GAsyncResult* _res_, GError** error);
GType dbus_service_id_bus_proxy_get_type (void) G_GNUC_CONST;
guint dbus_service_id_bus_register_object (void* object, GDBusConnection* connection, const gchar* path, GError** error);
GType dbus_service_id_bus_get_type (void) G_GNUC_CONST;
void dbus_service_id_bus_AddMatch (DBusServiceIDBus* self, const gchar* match, GAsyncReadyCallback _callback_, gpointer _user_data_);
void dbus_service_id_bus_AddMatch_finish (DBusServiceIDBus* self, GAsyncResult* _res_, GError** error);
void dbus_service_id_bus_GetAdtAuditSessionData (DBusServiceIDBus* self, const gchar* type, GAsyncReadyCallback _callback_, gpointer _user_data_);
guint8* dbus_service_id_bus_GetAdtAuditSessionData_finish (DBusServiceIDBus* self, GAsyncResult* _res_, int* result_length1, GError** error);
void dbus_service_id_bus_GetConnectionSELinuxSecurityContext (DBusServiceIDBus* self, const gchar* type, GAsyncReadyCallback _callback_, gpointer _user_data_);
guint8* dbus_service_id_bus_GetConnectionSELinuxSecurityContext_finish (DBusServiceIDBus* self, GAsyncResult* _res_, int* result_length1, GError** error);
void dbus_service_id_bus_GetConnectionUnixProcessID (DBusServiceIDBus* self, const gchar* conn, GAsyncReadyCallback _callback_, gpointer _user_data_);
guint32 dbus_service_id_bus_GetConnectionUnixProcessID_finish (DBusServiceIDBus* self, GAsyncResult* _res_, GError** error);
void dbus_service_id_bus_GetConnectionUnixUser (DBusServiceIDBus* self, const gchar* conn, GAsyncReadyCallback _callback_, gpointer _user_data_);
guint32 dbus_service_id_bus_GetConnectionUnixUser_finish (DBusServiceIDBus* self, GAsyncResult* _res_, GError** error);
void dbus_service_id_bus_GetId (DBusServiceIDBus* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
gchar* dbus_service_id_bus_GetId_finish (DBusServiceIDBus* self, GAsyncResult* _res_, GError** error);
void dbus_service_id_bus_GetNameOwner (DBusServiceIDBus* self, const gchar* name, GAsyncReadyCallback _callback_, gpointer _user_data_);
gchar* dbus_service_id_bus_GetNameOwner_finish (DBusServiceIDBus* self, GAsyncResult* _res_, GError** error);
void dbus_service_id_bus_Hello (DBusServiceIDBus* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
gchar* dbus_service_id_bus_Hello_finish (DBusServiceIDBus* self, GAsyncResult* _res_, GError** error);
void dbus_service_id_bus_ListActivatableNames (DBusServiceIDBus* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
gchar** dbus_service_id_bus_ListActivatableNames_finish (DBusServiceIDBus* self, GAsyncResult* _res_, int* result_length1, GError** error);
void dbus_service_id_bus_ListNames (DBusServiceIDBus* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
gchar** dbus_service_id_bus_ListNames_finish (DBusServiceIDBus* self, GAsyncResult* _res_, int* result_length1, GError** error);
void dbus_service_id_bus_ListQueuedOwners (DBusServiceIDBus* self, const gchar* None, GAsyncReadyCallback _callback_, gpointer _user_data_);
gchar** dbus_service_id_bus_ListQueuedOwners_finish (DBusServiceIDBus* self, GAsyncResult* _res_, int* result_length1, GError** error);
void dbus_service_id_bus_NameHasOwner (DBusServiceIDBus* self, const gchar* name, GAsyncReadyCallback _callback_, gpointer _user_data_);
gboolean dbus_service_id_bus_NameHasOwner_finish (DBusServiceIDBus* self, GAsyncResult* _res_, GError** error);
void dbus_service_id_bus_ReleaseName (DBusServiceIDBus* self, const gchar* name, GAsyncReadyCallback _callback_, gpointer _user_data_);
guint32 dbus_service_id_bus_ReleaseName_finish (DBusServiceIDBus* self, GAsyncResult* _res_, GError** error);
void dbus_service_id_bus_ReloadConfig (DBusServiceIDBus* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
void dbus_service_id_bus_ReloadConfig_finish (DBusServiceIDBus* self, GAsyncResult* _res_, GError** error);
void dbus_service_id_bus_RemoveMatch (DBusServiceIDBus* self, const gchar* match, GAsyncReadyCallback _callback_, gpointer _user_data_);
void dbus_service_id_bus_RemoveMatch_finish (DBusServiceIDBus* self, GAsyncResult* _res_, GError** error);
void dbus_service_id_bus_RequestName (DBusServiceIDBus* self, const gchar* name, guint32 flags, GAsyncReadyCallback _callback_, gpointer _user_data_);
guint32 dbus_service_id_bus_RequestName_finish (DBusServiceIDBus* self, GAsyncResult* _res_, GError** error);
void dbus_service_id_bus_StartServiceByName (DBusServiceIDBus* self, const gchar* name, guint32 flags, GAsyncReadyCallback _callback_, gpointer _user_data_);
guint32 dbus_service_id_bus_StartServiceByName_finish (DBusServiceIDBus* self, GAsyncResult* _res_, GError** error);
void dbus_service_id_bus_UpdateActivationEnvironment (DBusServiceIDBus* self, GHashTable* environment, GAsyncReadyCallback _callback_, gpointer _user_data_);
void dbus_service_id_bus_UpdateActivationEnvironment_finish (DBusServiceIDBus* self, GAsyncResult* _res_, GError** error);
GType dbus_service_id_bus_sync_proxy_get_type (void) G_GNUC_CONST;
guint dbus_service_id_bus_sync_register_object (void* object, GDBusConnection* connection, const gchar* path, GError** error);
GType dbus_service_id_bus_sync_get_type (void) G_GNUC_CONST;
void dbus_service_id_bus_sync_AddMatch (DBusServiceIDBusSync* self, const gchar* match, GError** error);
guint8* dbus_service_id_bus_sync_GetAdtAuditSessionData (DBusServiceIDBusSync* self, const gchar* type, int* result_length1, GError** error);
guint8* dbus_service_id_bus_sync_GetConnectionSELinuxSecurityContext (DBusServiceIDBusSync* self, const gchar* type, int* result_length1, GError** error);
guint32 dbus_service_id_bus_sync_GetConnectionUnixProcessID (DBusServiceIDBusSync* self, const gchar* conn, GError** error);
guint32 dbus_service_id_bus_sync_GetConnectionUnixUser (DBusServiceIDBusSync* self, const gchar* conn, GError** error);
gchar* dbus_service_id_bus_sync_GetId (DBusServiceIDBusSync* self, GError** error);
gchar* dbus_service_id_bus_sync_GetNameOwner (DBusServiceIDBusSync* self, const gchar* name, GError** error);
gchar* dbus_service_id_bus_sync_Hello (DBusServiceIDBusSync* self, GError** error);
gchar** dbus_service_id_bus_sync_ListActivatableNames (DBusServiceIDBusSync* self, int* result_length1, GError** error);
gchar** dbus_service_id_bus_sync_ListNames (DBusServiceIDBusSync* self, int* result_length1, GError** error);
gchar** dbus_service_id_bus_sync_ListQueuedOwners (DBusServiceIDBusSync* self, const gchar* None, int* result_length1, GError** error);
gboolean dbus_service_id_bus_sync_NameHasOwner (DBusServiceIDBusSync* self, const gchar* name, GError** error);
guint32 dbus_service_id_bus_sync_ReleaseName (DBusServiceIDBusSync* self, const gchar* name, GError** error);
void dbus_service_id_bus_sync_ReloadConfig (DBusServiceIDBusSync* self, GError** error);
void dbus_service_id_bus_sync_RemoveMatch (DBusServiceIDBusSync* self, const gchar* match, GError** error);
guint32 dbus_service_id_bus_sync_RequestName (DBusServiceIDBusSync* self, const gchar* name, guint32 flags, GError** error);
guint32 dbus_service_id_bus_sync_StartServiceByName (DBusServiceIDBusSync* self, const gchar* name, guint32 flags, GError** error);
void dbus_service_id_bus_sync_UpdateActivationEnvironment (DBusServiceIDBusSync* self, GHashTable* environment, GError** error);
gboolean fso_framework_isValidDBusName (const gchar* busname);
GType fso_framework_dbus_service_notifier_get_type (void) G_GNUC_CONST;
FsoFrameworkDBusServiceNotifier* fso_framework_dbus_service_notifier_new (void);
FsoFrameworkDBusServiceNotifier* fso_framework_dbus_service_notifier_construct (GType object_type);
void fso_framework_dbus_service_notifier_notifyAppearing (FsoFrameworkDBusServiceNotifier* self, const gchar* busname, FsoFrameworkDBusServiceEventFunc callback, void* callback_target);
void fso_framework_dbus_service_notifier_notifyDisappearing (FsoFrameworkDBusServiceNotifier* self, const gchar* busname, FsoFrameworkDBusServiceEventFunc callback, void* callback_target);
#define FSO_FRAMEWORK_ServiceDBusPrefix "org.freesmartphone"
#define FSO_FRAMEWORK_ServicePathPrefix "/org/freesmartphone"
#define FSO_FRAMEWORK_ServiceFacePrefix "org.freesmartphone"
#define FSO_FRAMEWORK_CONTEXT_ServiceDBusName FSO_FRAMEWORK_ServiceDBusPrefix ".ocontextd"
#define FSO_FRAMEWORK_CONTEXT_ServiceFacePrefix FSO_FRAMEWORK_ServiceFacePrefix ".Context"
#define FSO_FRAMEWORK_CONTEXT_ServicePathPrefix FSO_FRAMEWORK_ServicePathPrefix "/Context"
#define FSO_FRAMEWORK_CONTEXT_ManagerServiceFace FSO_FRAMEWORK_CONTEXT_ServiceFacePrefix ".Manager"
#define FSO_FRAMEWORK_CONTEXT_ManagerServicePath FSO_FRAMEWORK_CONTEXT_ServicePathPrefix "/Manager"
#define FSO_FRAMEWORK_CONTEXT_ClientServiceFace FSO_FRAMEWORK_CONTEXT_ServiceFacePrefix ".Client"
#define FSO_FRAMEWORK_CONTEXT_ClientServicePath FSO_FRAMEWORK_CONTEXT_ServicePathPrefix "/Client"
#define FSO_FRAMEWORK_DATA_ServiceDBusName FSO_FRAMEWORK_ServiceDBusPrefix ".odatad"
#define FSO_FRAMEWORK_DATA_ServiceFacePrefix FSO_FRAMEWORK_ServiceFacePrefix ".Data"
#define FSO_FRAMEWORK_DATA_ServicePathPrefix FSO_FRAMEWORK_ServicePathPrefix "/Data"
#define FSO_FRAMEWORK_DATA_WorldServiceFace FSO_FRAMEWORK_DATA_ServiceFacePrefix ".World"
#define FSO_FRAMEWORK_DATA_WorldServicePath FSO_FRAMEWORK_DATA_ServicePathPrefix "/World"
#define FSO_FRAMEWORK_DEVICE_ServiceDBusName FSO_FRAMEWORK_ServiceDBusPrefix ".odeviced"
#define FSO_FRAMEWORK_DEVICE_ServiceFacePrefix FSO_FRAMEWORK_ServiceFacePrefix ".Device"
#define FSO_FRAMEWORK_DEVICE_ServicePathPrefix FSO_FRAMEWORK_ServicePathPrefix "/Device"
#define FSO_FRAMEWORK_DEVICE_AmbientLightServiceFace FSO_FRAMEWORK_DEVICE_ServiceFacePrefix ".AmbientLight"
#define FSO_FRAMEWORK_DEVICE_AmbientLightServicePath FSO_FRAMEWORK_DEVICE_ServicePathPrefix "/AmbientLight"
#define FSO_FRAMEWORK_DEVICE_AudioServiceFace FSO_FRAMEWORK_DEVICE_ServiceFacePrefix ".Audio"
#define FSO_FRAMEWORK_DEVICE_AudioServicePath FSO_FRAMEWORK_DEVICE_ServicePathPrefix "/Audio"
#define FSO_FRAMEWORK_DEVICE_DisplayServiceFace FSO_FRAMEWORK_DEVICE_ServiceFacePrefix ".Display"
#define FSO_FRAMEWORK_DEVICE_DisplayServicePath FSO_FRAMEWORK_DEVICE_ServicePathPrefix "/Display"
#define FSO_FRAMEWORK_DEVICE_IdleNotifierServiceFace FSO_FRAMEWORK_DEVICE_ServiceFacePrefix ".IdleNotifier"
#define FSO_FRAMEWORK_DEVICE_IdleNotifierServicePath FSO_FRAMEWORK_DEVICE_ServicePathPrefix "/IdleNotifier"
#define FSO_FRAMEWORK_DEVICE_InfoServiceFace FSO_FRAMEWORK_DEVICE_ServiceFacePrefix ".Info"
#define FSO_FRAMEWORK_DEVICE_InfoServicePath FSO_FRAMEWORK_DEVICE_ServicePathPrefix "/Info"
#define FSO_FRAMEWORK_DEVICE_InputServiceFace FSO_FRAMEWORK_DEVICE_ServiceFacePrefix ".Input"
#define FSO_FRAMEWORK_DEVICE_InputServicePath FSO_FRAMEWORK_DEVICE_ServicePathPrefix "/Input"
#define FSO_FRAMEWORK_DEVICE_LedServiceFace FSO_FRAMEWORK_DEVICE_ServiceFacePrefix ".LED"
#define FSO_FRAMEWORK_DEVICE_LedServicePath FSO_FRAMEWORK_DEVICE_ServicePathPrefix "/LED"
#define FSO_FRAMEWORK_DEVICE_OrientationServiceFace FSO_FRAMEWORK_DEVICE_ServiceFacePrefix ".Orientation"
#define FSO_FRAMEWORK_DEVICE_OrientationServicePath FSO_FRAMEWORK_DEVICE_ServicePathPrefix "/Orientation"
#define FSO_FRAMEWORK_DEVICE_PowerControlServiceFace FSO_FRAMEWORK_DEVICE_ServiceFacePrefix ".PowerControl"
#define FSO_FRAMEWORK_DEVICE_PowerControlServicePath FSO_FRAMEWORK_DEVICE_ServicePathPrefix "/PowerControl"
#define FSO_FRAMEWORK_DEVICE_PowerSupplyServiceFace FSO_FRAMEWORK_DEVICE_ServiceFacePrefix ".PowerSupply"
#define FSO_FRAMEWORK_DEVICE_PowerSupplyServicePath FSO_FRAMEWORK_DEVICE_ServicePathPrefix "/PowerSupply"
#define FSO_FRAMEWORK_DEVICE_ProximityServiceFace FSO_FRAMEWORK_DEVICE_ServiceFacePrefix ".Proximity"
#define FSO_FRAMEWORK_DEVICE_ProximityServicePath FSO_FRAMEWORK_DEVICE_ServicePathPrefix "/Proximity"
#define FSO_FRAMEWORK_DEVICE_RtcServiceFace FSO_FRAMEWORK_DEVICE_ServiceFacePrefix ".RTC"
#define FSO_FRAMEWORK_DEVICE_RtcServicePath FSO_FRAMEWORK_DEVICE_ServicePathPrefix "/RTC"
#define FSO_FRAMEWORK_DEVICE_VibratorServiceFace FSO_FRAMEWORK_DEVICE_ServiceFacePrefix ".Vibrator"
#define FSO_FRAMEWORK_DEVICE_VibratorServicePath FSO_FRAMEWORK_DEVICE_ServicePathPrefix "/Vibrator"
#define FSO_FRAMEWORK_GPS_ServiceDBusName FSO_FRAMEWORK_ServiceDBusPrefix ".ogpsd"
#define FSO_FRAMEWORK_GPS_ServiceFacePrefix FSO_FRAMEWORK_ServiceFacePrefix ".GPS"
#define FSO_FRAMEWORK_GPS_ServicePathPrefix FSO_FRAMEWORK_ServicePathPrefix "/GPS"
#define FSO_FRAMEWORK_GPS_DeviceServiceFace FSO_FRAMEWORK_GPS_ServiceFacePrefix ".Device"
#define FSO_FRAMEWORK_GPS_DeviceServicePath FSO_FRAMEWORK_GPS_ServicePathPrefix "/Device"
#define FSO_FRAMEWORK_GSM_ServiceDBusName FSO_FRAMEWORK_ServiceDBusPrefix ".ogsmd"
#define FSO_FRAMEWORK_GSM_ServiceFacePrefix FSO_FRAMEWORK_ServiceFacePrefix ".GSM"
#define FSO_FRAMEWORK_GSM_ServicePathPrefix FSO_FRAMEWORK_ServicePathPrefix "/GSM"
#define FSO_FRAMEWORK_GSM_DeviceServiceFace FSO_FRAMEWORK_GSM_ServiceFacePrefix ".Device"
#define FSO_FRAMEWORK_GSM_DeviceServicePath FSO_FRAMEWORK_GSM_ServicePathPrefix "/Device"
#define FSO_FRAMEWORK_NETWORK_ServiceDBusName FSO_FRAMEWORK_ServiceDBusPrefix ".onetworkd"
#define FSO_FRAMEWORK_NETWORK_ServiceFacePrefix FSO_FRAMEWORK_ServiceFacePrefix ".Network"
#define FSO_FRAMEWORK_NETWORK_ServicePathPrefix FSO_FRAMEWORK_ServicePathPrefix "/Network"
#define FSO_FRAMEWORK_PHONE_ServiceDBusName FSO_FRAMEWORK_ServiceDBusPrefix ".ophoned"
#define FSO_FRAMEWORK_PHONE_ServiceFacePrefix FSO_FRAMEWORK_ServiceFacePrefix ".Phone"
#define FSO_FRAMEWORK_PHONE_ServicePathPrefix FSO_FRAMEWORK_ServicePathPrefix "/Phone"
#define FSO_FRAMEWORK_PHONE_ManagerServiceFace FSO_FRAMEWORK_PHONE_ServiceFacePrefix ".Manager"
#define FSO_FRAMEWORK_PHONE_ManagerServicePath FSO_FRAMEWORK_PHONE_ServicePathPrefix "/Manager"
#define FSO_FRAMEWORK_PHONE_ClientServiceFace FSO_FRAMEWORK_PHONE_ServiceFacePrefix ".Client"
#define FSO_FRAMEWORK_PHONE_ClientServicePath FSO_FRAMEWORK_PHONE_ServicePathPrefix "/Client"
#define FSO_FRAMEWORK_PREFERENCES_ServiceDBusName FSO_FRAMEWORK_ServiceDBusPrefix ".opreferencesd"
#define FSO_FRAMEWORK_PREFERENCES_ServiceFacePrefix FSO_FRAMEWORK_ServiceFacePrefix ".Preferences"
#define FSO_FRAMEWORK_PREFERENCES_ServicePathPrefix FSO_FRAMEWORK_ServicePathPrefix "/Preferences"
#define FSO_FRAMEWORK_PIM_ServiceDBusName FSO_FRAMEWORK_ServiceDBusPrefix ".opimd"
#define FSO_FRAMEWORK_PIM_ServiceFacePrefix FSO_FRAMEWORK_ServiceFacePrefix ".PIM"
#define FSO_FRAMEWORK_PIM_ServicePathPrefix FSO_FRAMEWORK_ServicePathPrefix "/PIM"
#define FSO_FRAMEWORK_PIM_MessagesServiceFace FSO_FRAMEWORK_PIM_ServiceFacePrefix ".Messages"
#define FSO_FRAMEWORK_PIM_MessagesServicePath FSO_FRAMEWORK_PIM_ServicePathPrefix "/Messages"
#define FSO_FRAMEWORK_PIM_ContactsServiceFace FSO_FRAMEWORK_PIM_ServiceFacePrefix ".Contacts"
#define FSO_FRAMEWORK_PIM_ContactsServicePath FSO_FRAMEWORK_PIM_ServicePathPrefix "/Contacts"
#define FSO_FRAMEWORK_PIM_ContactServiceFace FSO_FRAMEWORK_PIM_ServiceFacePrefix ".Contact"
#define FSO_FRAMEWORK_PIM_CallsServiceFace FSO_FRAMEWORK_PIM_ServiceFacePrefix ".Calls"
#define FSO_FRAMEWORK_PIM_CallsServicePath FSO_FRAMEWORK_PIM_ServicePathPrefix "/Calls"
#define FSO_FRAMEWORK_PIM_TasksServiceFace FSO_FRAMEWORK_PIM_ServiceFacePrefix ".Tasks"
#define FSO_FRAMEWORK_PIM_TasksServicePath FSO_FRAMEWORK_PIM_ServicePathPrefix "/Tasks"
#define FSO_FRAMEWORK_PIM_NotesServiceFace FSO_FRAMEWORK_PIM_ServiceFacePrefix ".Notes"
#define FSO_FRAMEWORK_PIM_NotesServicePath FSO_FRAMEWORK_PIM_ServicePathPrefix "/Notes"
#define FSO_FRAMEWORK_RESOURCE_ServiceDBusName FSO_FRAMEWORK_ServiceDBusPrefix ".oresourced"
#define FSO_FRAMEWORK_RESOURCE_ServiceFacePrefix FSO_FRAMEWORK_ServiceFacePrefix ".Resource"
#define FSO_FRAMEWORK_RESOURCE_ServicePathPrefix FSO_FRAMEWORK_ServicePathPrefix "/Resource"
#define FSO_FRAMEWORK_TIME_ServiceDBusName FSO_FRAMEWORK_ServiceDBusPrefix ".otimed"
#define FSO_FRAMEWORK_TIME_ServiceFacePrefix FSO_FRAMEWORK_ServiceFacePrefix ".Time"
#define FSO_FRAMEWORK_TIME_ServicePathPrefix FSO_FRAMEWORK_ServicePathPrefix "/Time"
#define FSO_FRAMEWORK_TIME_AlarmServiceFace FSO_FRAMEWORK_TIME_ServiceFacePrefix ".Alarm"
#define FSO_FRAMEWORK_TIME_AlarmServicePath FSO_FRAMEWORK_TIME_ServicePathPrefix "/Alarm"
#define FSO_FRAMEWORK_TIME_LocationServiceFace FSO_FRAMEWORK_TIME_ServiceFacePrefix ".Location"
#define FSO_FRAMEWORK_TIME_LocationServicePath FSO_FRAMEWORK_TIME_ServicePathPrefix "/Location"
#define FSO_FRAMEWORK_USAGE_ServiceDBusName FSO_FRAMEWORK_ServiceDBusPrefix ".ousaged"
#define FSO_FRAMEWORK_USAGE_ServiceFacePrefix FSO_FRAMEWORK_ServiceFacePrefix ".Usage"
#define FSO_FRAMEWORK_USAGE_ServicePathPrefix FSO_FRAMEWORK_ServicePathPrefix "/Usage"
#define FSO_FRAMEWORK_AUDIO_ServiceDBusName FSO_FRAMEWORK_ServiceDBusPrefix ".oaudiod"
#define FSO_FRAMEWORK_AUDIO_ServiceFacePrefix FSO_FRAMEWORK_ServiceFacePrefix ".Audio"
#define FSO_FRAMEWORK_AUDIO_ServicePathPrefix FSO_FRAMEWORK_ServicePathPrefix "/Audio"
#define FSO_FRAMEWORK_APPLICATION_ServiceDBusName FSO_FRAMEWORK_ServiceDBusPrefix ".oappd"
#define FSO_FRAMEWORK_APPLICATION_ServiceFacePrefix FSO_FRAMEWORK_ServiceFacePrefix ".Application"
#define FSO_FRAMEWORK_APPLICATION_ServicePathPrefix FSO_FRAMEWORK_ServicePathPrefix "/Application"
GQuark fso_framework_plugin_error_quark (void);
GType fso_framework_plugin_info_get_type (void) G_GNUC_CONST;
FsoFrameworkPluginInfo* fso_framework_plugin_info_dup (const FsoFrameworkPluginInfo* self);
void fso_framework_plugin_info_free (FsoFrameworkPluginInfo* self);
void fso_framework_plugin_info_copy (const FsoFrameworkPluginInfo* self, FsoFrameworkPluginInfo* dest);
void fso_framework_plugin_info_destroy (FsoFrameworkPluginInfo* self);
GType fso_framework_subsystem_get_type (void) G_GNUC_CONST;
GType fso_framework_plugin_get_type (void) G_GNUC_CONST;
void fso_framework_plugin_loadAndInit (FsoFrameworkPlugin* self, GError** error);
void fso_framework_plugin_info (FsoFrameworkPlugin* self, FsoFrameworkPluginInfo* result);
void fso_framework_plugin_shutdown (FsoFrameworkPlugin* self);
GType fso_framework_base_plugin_get_type (void) G_GNUC_CONST;
FsoFrameworkBasePlugin* fso_framework_base_plugin_new (const gchar* filename, FsoFrameworkSubsystem* subsystem);
FsoFrameworkBasePlugin* fso_framework_base_plugin_construct (GType object_type, const gchar* filename, FsoFrameworkSubsystem* subsystem);
GType fso_framework_resource_status_get_type (void) G_GNUC_CONST;
guint fso_framework_subsystem_registerPlugins (FsoFrameworkSubsystem* self);
guint fso_framework_subsystem_loadPlugins (FsoFrameworkSubsystem* self);
gchar* fso_framework_subsystem_name (FsoFrameworkSubsystem* self);
GList* fso_framework_subsystem_pluginsInfo (FsoFrameworkSubsystem* self);
void fso_framework_subsystem_registerObjectForService (FsoFrameworkSubsystem* self, GType t_type, GBoxedCopyFunc t_dup_func, GDestroyNotify t_destroy_func, const gchar* servicename, const gchar* objectpath, gconstpointer obj);
void fso_framework_subsystem_registerObjectForServiceWithPrefix (FsoFrameworkSubsystem* self, GType t_type, GBoxedCopyFunc t_dup_func, GDestroyNotify t_destroy_func, const gchar* servicename, const gchar* prefixpath, gconstpointer obj);
void fso_framework_subsystem_unregisterObjectForService (FsoFrameworkSubsystem* self, GType t_type, GBoxedCopyFunc t_dup_func, GDestroyNotify t_destroy_func, const gchar* servicename, const gchar* objectpath);
GObject** fso_framework_subsystem_allObjectsWithPrefix (FsoFrameworkSubsystem* self, const gchar* prefix, int* result_length1);
void fso_framework_subsystem_shutdown (FsoFrameworkSubsystem* self);
GType fso_framework_abstract_subsystem_get_type (void) G_GNUC_CONST;
FsoFrameworkAbstractSubsystem* fso_framework_abstract_subsystem_construct (GType object_type, const gchar* name);
void fso_framework_abstract_subsystem_registerObjectForService (FsoFrameworkAbstractSubsystem* self, GType t_type, GBoxedCopyFunc t_dup_func, GDestroyNotify t_destroy_func, const gchar* servicename, const gchar* objectpath, gconstpointer obj);
void fso_framework_abstract_subsystem_registerObjectForServiceWithPrefix (FsoFrameworkAbstractSubsystem* self, GType t_type, GBoxedCopyFunc t_dup_func, GDestroyNotify t_destroy_func, const gchar* servicename, const gchar* prefixpath, gconstpointer obj);
gboolean fso_framework_abstract_subsystem_registerServiceObjectWithPrefix (FsoFrameworkAbstractSubsystem* self, const gchar* servicename, const gchar* prefix, GObject* obj);
GObject** fso_framework_abstract_subsystem_allObjectsWithPrefix (FsoFrameworkAbstractSubsystem* self, const gchar* prefix, int* result_length1);
void fso_framework_abstract_subsystem_unregisterObjectForService (FsoFrameworkAbstractSubsystem* self, GType t_type, GBoxedCopyFunc t_dup_func, GDestroyNotify t_destroy_func, const gchar* servicename, const gchar* objectpath);
GType fso_framework_base_subsystem_get_type (void) G_GNUC_CONST;
FsoFrameworkBaseSubsystem* fso_framework_base_subsystem_new (const gchar* name);
FsoFrameworkBaseSubsystem* fso_framework_base_subsystem_construct (GType object_type, const gchar* name);
gpointer fso_framework_dbus_export_object_ref (gpointer instance);
void fso_framework_dbus_export_object_unref (gpointer instance);
GParamSpec* fso_framework_param_spec_dbus_export_object (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void fso_framework_value_set_dbus_export_object (GValue* value, gpointer v_object);
void fso_framework_value_take_dbus_export_object (GValue* value, gpointer v_object);
gpointer fso_framework_value_get_dbus_export_object (const GValue* value);
GType fso_framework_dbus_export_object_get_type (void) G_GNUC_CONST;
FsoFrameworkDBusExportObject* fso_framework_dbus_export_object_new (void);
FsoFrameworkDBusExportObject* fso_framework_dbus_export_object_construct (GType object_type);
GType fso_framework_dbus_subsystem_get_type (void) G_GNUC_CONST;
FsoFrameworkDBusSubsystem* fso_framework_dbus_subsystem_new (const gchar* name, GBusType type);
FsoFrameworkDBusSubsystem* fso_framework_dbus_subsystem_construct (GType object_type, const gchar* name, GBusType type);
void fso_framework_dbus_subsystem_exportBusnames (FsoFrameworkDBusSubsystem* self);
GDBusConnection* fso_framework_dbus_subsystem_dbusConnection (FsoFrameworkDBusSubsystem* self);


G_END_DECLS

#endif
