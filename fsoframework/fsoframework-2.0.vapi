/* fsoframework-2.0.vapi generated by valac, do not modify. */

[CCode (cprefix = "DBus", lower_case_cprefix = "dbus_")]
namespace DBus {
	[CCode (cheader_filename = "dbus/dbus-glib-lowlevel.h,dbus/dbus-glib.h")]
	public const string DBUS_INTERFACE_DBUS;
	[CCode (cheader_filename = "dbus/dbus-glib-lowlevel.h,dbus/dbus-glib.h")]
	public const string DBUS_INTERFACE_INTROSPECTABLE;
	[CCode (cheader_filename = "dbus/dbus-glib-lowlevel.h,dbus/dbus-glib.h")]
	public const string DBUS_INTERFACE_PEER;
	[CCode (cheader_filename = "dbus/dbus-glib-lowlevel.h,dbus/dbus-glib.h")]
	public const string DBUS_INTERFACE_PROPERTIES;
	[CCode (cheader_filename = "dbus/dbus-glib-lowlevel.h,dbus/dbus-glib.h")]
	public const string DBUS_PATH_DBUS;
	[CCode (cheader_filename = "dbus/dbus-glib-lowlevel.h,dbus/dbus-glib.h")]
	public const string DBUS_SERVICE_DBUS;
}
[CCode (cprefix = "FsoFramework", lower_case_cprefix = "fso_framework_")]
namespace FsoFramework {
	[CCode (cprefix = "FsoFrameworkDevice", lower_case_cprefix = "fso_framework_device_")]
	namespace Device {
		[CCode (cheader_filename = "fsoframework.h")]
		public const string AudioServiceFace;
		[CCode (cheader_filename = "fsoframework.h")]
		public const string AudioServicePath;
		[CCode (cheader_filename = "fsoframework.h")]
		public const string DisplayServiceFace;
		[CCode (cheader_filename = "fsoframework.h")]
		public const string DisplayServicePath;
		[CCode (cheader_filename = "fsoframework.h")]
		public const string IdleNotifierServiceFace;
		[CCode (cheader_filename = "fsoframework.h")]
		public const string IdleNotifierServicePath;
		[CCode (cheader_filename = "fsoframework.h")]
		public const string InfoServiceFace;
		[CCode (cheader_filename = "fsoframework.h")]
		public const string InfoServicePath;
		[CCode (cheader_filename = "fsoframework.h")]
		public const string InputServiceFace;
		[CCode (cheader_filename = "fsoframework.h")]
		public const string InputServicePath;
		[CCode (cheader_filename = "fsoframework.h")]
		public const string LedServiceFace;
		[CCode (cheader_filename = "fsoframework.h")]
		public const string LedServicePath;
		[CCode (cheader_filename = "fsoframework.h")]
		public const string PowerControlServiceFace;
		[CCode (cheader_filename = "fsoframework.h")]
		public const string PowerControlServicePath;
		[CCode (cheader_filename = "fsoframework.h")]
		public const string PowerSupplyServiceFace;
		[CCode (cheader_filename = "fsoframework.h")]
		public const string PowerSupplyServicePath;
		[CCode (cheader_filename = "fsoframework.h")]
		public const string RtcServiceFace;
		[CCode (cheader_filename = "fsoframework.h")]
		public const string RtcServicePath;
		[CCode (cheader_filename = "fsoframework.h")]
		public const string ServiceDBusName;
		[CCode (cheader_filename = "fsoframework.h")]
		public const string ServiceFacePrefix;
		[CCode (cheader_filename = "fsoframework.h")]
		public const string ServicePathPrefix;
	}
	[CCode (cprefix = "FsoFrameworkNetwork", lower_case_cprefix = "fso_framework_network_")]
	namespace Network {
		[CCode (cheader_filename = "fsoframework.h")]
		public const string ServiceDBusName;
		[CCode (cheader_filename = "fsoframework.h")]
		public const string ServiceFacePrefix;
		[CCode (cheader_filename = "fsoframework.h")]
		public const string ServicePathPrefix;
	}
	[CCode (cprefix = "FsoFrameworkResource", lower_case_cprefix = "fso_framework_resource_")]
	namespace Resource {
		[CCode (cheader_filename = "fsoframework.h")]
		public const string ServiceDBusName;
		[CCode (cheader_filename = "fsoframework.h")]
		public const string ServiceFacePrefix;
		[CCode (cheader_filename = "fsoframework.h")]
		public const string ServicePathPrefix;
	}
	[CCode (cprefix = "FsoFrameworkTime", lower_case_cprefix = "fso_framework_time_")]
	namespace Time {
		[CCode (cheader_filename = "fsoframework.h")]
		public const string AlarmServiceFace;
		[CCode (cheader_filename = "fsoframework.h")]
		public const string AlarmServicePath;
		[CCode (cheader_filename = "fsoframework.h")]
		public const string ServiceDBusName;
		[CCode (cheader_filename = "fsoframework.h")]
		public const string ServiceFacePrefix;
		[CCode (cheader_filename = "fsoframework.h")]
		public const string ServicePathPrefix;
	}
	[CCode (cprefix = "FsoFrameworkUsage", lower_case_cprefix = "fso_framework_usage_")]
	namespace Usage {
		[CCode (cheader_filename = "fsoframework.h")]
		public const string ServiceDBusName;
		[CCode (cheader_filename = "fsoframework.h")]
		public const string ServiceFacePrefix;
		[CCode (cheader_filename = "fsoframework.h")]
		public const string ServicePathPrefix;
	}
	[CCode (cheader_filename = "fsoframework.h")]
	public abstract class AbstractObject : GLib.Object {
		public string classname;
		protected FsoFramework.SmartKeyFile config;
		protected FsoFramework.Logger logger;
		public AbstractObject ();
		public abstract string repr ();
	}
	[CCode (cheader_filename = "fsoframework.h")]
	public abstract class AbstractSubsystem : FsoFramework.Subsystem, GLib.Object {
		protected FsoFramework.Logger logger;
		public AbstractSubsystem (string name);
		public virtual bool registerServiceName (string servicename);
		public virtual bool registerServiceObject (string servicename, string objectname, GLib.Object obj);
	}
	[CCode (cheader_filename = "fsoframework.h")]
	public class AsyncWorkerQueue<T> : FsoFramework.AbstractWorkerQueue<T>, GLib.Object {
		protected GLib.Queue<T> q;
		protected FsoFramework.AbstractWorkerQueue.WorkerFunc worker;
		protected bool _onIdle ();
		public AsyncWorkerQueue ();
	}
	[CCode (cheader_filename = "fsoframework.h")]
	public class BaseKObjectNotifier : GLib.Object {
		public static FsoFramework.BaseKObjectNotifier instance;
		protected void _addMatch (string action, string subsystem, FsoFramework.KObjectNotifierFunc callback);
		public static void addMatch (string action, string path, FsoFramework.KObjectNotifierFunc callback);
		protected void handleMessage (string[] parts);
		public BaseKObjectNotifier ();
		protected bool onActionFromSocket (GLib.IOChannel source, GLib.IOCondition condition);
	}
	[CCode (cheader_filename = "fsoframework.h")]
	public class BasePlugin : FsoFramework.Plugin, GLib.TypeModule {
		public override bool load ();
		public BasePlugin (string filename, FsoFramework.Subsystem subsystem);
		public override void unload ();
	}
	[CCode (cheader_filename = "fsoframework.h")]
	public class BaseSubsystem : FsoFramework.AbstractSubsystem {
		public BaseSubsystem (string name);
	}
	[CCode (cheader_filename = "fsoframework.h")]
	public class DBusServiceNotifier : FsoFramework.AbstractObject {
		public DBusServiceNotifier ();
		public void notifyAppearing (string busname, FsoFramework.DBusServiceEventFunc callback);
		public void notifyDisappearing (string busname, FsoFramework.DBusServiceEventFunc callback);
		public override string repr ();
	}
	[CCode (cheader_filename = "fsoframework.h")]
	public class DBusSubsystem : FsoFramework.AbstractSubsystem {
		public DBus.Connection dbusConnection ();
		public DBusSubsystem (string name);
		public override bool registerServiceName (string servicename);
		public override bool registerServiceObject (string servicename, string objectname, GLib.Object obj);
	}
	[CCode (ref_function = "fso_framework_mixer_control_ref", unref_function = "fso_framework_mixer_control_unref", param_spec_function = "fso_framework_param_spec_mixer_control", cheader_filename = "fsoframework.h")]
	public class MixerControl {
		public Alsa.ElemId eid;
		public Alsa.ElemInfo info;
		public Alsa.ElemValue value;
		public MixerControl (ref Alsa.ElemId eid, ref Alsa.ElemInfo info, ref Alsa.ElemValue value);
		public string to_string ();
	}
	[CCode (cheader_filename = "fsoframework.h")]
	public class SoundDevice : FsoFramework.AbstractObject {
		public string fullname;
		public string mixername;
		public string name;
		public FsoFramework.MixerControl[] allMixerControls () throws FsoFramework.SoundError;
		public FsoFramework.MixerControl controlForString (string description) throws FsoFramework.SoundError;
		public static FsoFramework.SoundDevice create (string cardname = "default") throws FsoFramework.SoundError;
		public override string repr ();
		public void setAllMixerControls (FsoFramework.MixerControl[] controls) throws FsoFramework.SoundError;
		public void setControl (FsoFramework.MixerControl control) throws FsoFramework.SoundError;
	}
	[CCode (cheader_filename = "fsoframework.h")]
	public interface AbstractWorkerQueue<T> : GLib.Object {
		[CCode (cheader_filename = "fsoframework.h")]
		public delegate void WorkerFunc (T element);
		public abstract void enqueue (T element);
		public abstract void setDelegate (FsoFramework.AbstractWorkerQueue.WorkerFunc worker);
		public abstract void trigger ();
	}
	[CCode (cheader_filename = "fsoframework.h")]
	public interface Plugin : GLib.Object {
		public abstract FsoFramework.PluginInfo info ();
		public abstract void loadAndInit () throws FsoFramework.PluginError;
	}
	[CCode (cheader_filename = "fsoframework.h")]
	public interface Subsystem : GLib.Object {
		public abstract uint loadPlugins ();
		public abstract string name ();
		public abstract GLib.List<FsoFramework.PluginInfo?> pluginsInfo ();
		public abstract uint registerPlugins ();
		public abstract bool registerServiceName (string servicename);
		public abstract bool registerServiceObject (string servicename, string objectname, GLib.Object obj);
	}
	[CCode (type_id = "FSO_FRAMEWORK_TYPE_PLUGIN_INFO", cheader_filename = "fsoframework.h")]
	public struct PluginInfo {
		public string name;
		public bool loaded;
	}
	[CCode (cprefix = "FSO_FRAMEWORK_PLUGIN_ERROR_", cheader_filename = "fsoframework.h")]
	public errordomain PluginError {
		UNABLE_TO_LOAD,
		REGISTER_NOT_FOUND,
		FACTORY_NOT_FOUND,
		UNABLE_TO_INITIALIZE,
	}
	[CCode (cprefix = "FSO_FRAMEWORK_SOUND_ERROR_", cheader_filename = "fsoframework.h")]
	public errordomain SoundError {
		NO_DEVICE,
		DEVICE_ERROR,
		NOT_ENOUGH_CONTROLS,
		INVALID_DESCRIPTOR,
	}
	[CCode (cheader_filename = "fsoframework.h")]
	public delegate void DBusServiceEventFunc (string busname);
	[CCode (cheader_filename = "fsoframework.h", has_target = false)]
	public delegate string FactoryFunc (FsoFramework.Subsystem subsystem);
	[CCode (cheader_filename = "fsoframework.h")]
	public delegate void KObjectNotifierFunc (GLib.HashTable<string,string> properties);
	[CCode (cheader_filename = "fsoframework.h", has_target = false)]
	public delegate void RegisterFunc (GLib.TypeModule bar);
	[CCode (cheader_filename = "fsoframework.h")]
	public const string ServiceDBusPrefix;
	[CCode (cheader_filename = "fsoframework.h")]
	public const string ServiceFacePrefix;
	[CCode (cheader_filename = "fsoframework.h")]
	public const string ServicePathPrefix;
	[CCode (cheader_filename = "fsoframework.h")]
	public static FsoFramework.Logger createLogger (string group, string domain);
	[CCode (cheader_filename = "fsoframework.h")]
	public static FsoFramework.DBusServiceNotifier theDBusServiceNotifier ();
	[CCode (cheader_filename = "fsoframework.h")]
	public static FsoFramework.SmartKeyFile theMasterKeyFile ();
}
[CCode (cheader_filename = "fsoframework.h")]
[DBus (name = "org.freesmartphone.DBus.Objects")]
public interface DBusObjects {
	public abstract void getNodes () throws DBus.Error;
}
