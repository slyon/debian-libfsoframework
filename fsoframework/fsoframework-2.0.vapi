/* fsoframework-2.0.vapi generated by valac 0.14.2, do not modify. */

namespace FsoFramework {
	namespace Application {
		[CCode (cheader_filename = "fsoframework.h")]
		public const string ServiceDBusName;
		[CCode (cheader_filename = "fsoframework.h")]
		public const string ServiceFacePrefix;
		[CCode (cheader_filename = "fsoframework.h")]
		public const string ServicePathPrefix;
	}
	namespace Audio {
		[CCode (cheader_filename = "fsoframework.h")]
		public const string ServiceDBusName;
		[CCode (cheader_filename = "fsoframework.h")]
		public const string ServiceFacePrefix;
		[CCode (cheader_filename = "fsoframework.h")]
		public const string ServicePathPrefix;
	}
	namespace Context {
		[CCode (cheader_filename = "fsoframework.h")]
		public const string ClientServiceFace;
		[CCode (cheader_filename = "fsoframework.h")]
		public const string ClientServicePath;
		[CCode (cheader_filename = "fsoframework.h")]
		public const string ManagerServiceFace;
		[CCode (cheader_filename = "fsoframework.h")]
		public const string ManagerServicePath;
		[CCode (cheader_filename = "fsoframework.h")]
		public const string ServiceDBusName;
		[CCode (cheader_filename = "fsoframework.h")]
		public const string ServiceFacePrefix;
		[CCode (cheader_filename = "fsoframework.h")]
		public const string ServicePathPrefix;
	}
	namespace Data {
		[CCode (cheader_filename = "fsoframework.h")]
		public const string ServiceDBusName;
		[CCode (cheader_filename = "fsoframework.h")]
		public const string ServiceFacePrefix;
		[CCode (cheader_filename = "fsoframework.h")]
		public const string ServicePathPrefix;
		[CCode (cheader_filename = "fsoframework.h")]
		public const string WorldServiceFace;
		[CCode (cheader_filename = "fsoframework.h")]
		public const string WorldServicePath;
	}
	namespace Device {
		[CCode (cheader_filename = "fsoframework.h")]
		public const string AmbientLightServiceFace;
		[CCode (cheader_filename = "fsoframework.h")]
		public const string AmbientLightServicePath;
		[CCode (cheader_filename = "fsoframework.h")]
		public const string AudioServiceFace;
		[CCode (cheader_filename = "fsoframework.h")]
		public const string AudioServicePath;
		[CCode (cheader_filename = "fsoframework.h")]
		public const string DisplayServiceFace;
		[CCode (cheader_filename = "fsoframework.h")]
		public const string DisplayServicePath;
		[CCode (cheader_filename = "fsoframework.h")]
		public const string IdleNotifierServiceFace;
		[CCode (cheader_filename = "fsoframework.h")]
		public const string IdleNotifierServicePath;
		[CCode (cheader_filename = "fsoframework.h")]
		public const string InfoServiceFace;
		[CCode (cheader_filename = "fsoframework.h")]
		public const string InfoServicePath;
		[CCode (cheader_filename = "fsoframework.h")]
		public const string InputServiceFace;
		[CCode (cheader_filename = "fsoframework.h")]
		public const string InputServicePath;
		[CCode (cheader_filename = "fsoframework.h")]
		public const string LedServiceFace;
		[CCode (cheader_filename = "fsoframework.h")]
		public const string LedServicePath;
		[CCode (cheader_filename = "fsoframework.h")]
		public const string OrientationServiceFace;
		[CCode (cheader_filename = "fsoframework.h")]
		public const string OrientationServicePath;
		[CCode (cheader_filename = "fsoframework.h")]
		public const string PowerControlServiceFace;
		[CCode (cheader_filename = "fsoframework.h")]
		public const string PowerControlServicePath;
		[CCode (cheader_filename = "fsoframework.h")]
		public const string PowerSupplyServiceFace;
		[CCode (cheader_filename = "fsoframework.h")]
		public const string PowerSupplyServicePath;
		[CCode (cheader_filename = "fsoframework.h")]
		public const string ProximityServiceFace;
		[CCode (cheader_filename = "fsoframework.h")]
		public const string ProximityServicePath;
		[CCode (cheader_filename = "fsoframework.h")]
		public const string RtcServiceFace;
		[CCode (cheader_filename = "fsoframework.h")]
		public const string RtcServicePath;
		[CCode (cheader_filename = "fsoframework.h")]
		public const string ServiceDBusName;
		[CCode (cheader_filename = "fsoframework.h")]
		public const string ServiceFacePrefix;
		[CCode (cheader_filename = "fsoframework.h")]
		public const string ServicePathPrefix;
		[CCode (cheader_filename = "fsoframework.h")]
		public const string VibratorServiceFace;
		[CCode (cheader_filename = "fsoframework.h")]
		public const string VibratorServicePath;
	}
	namespace GPS {
		[CCode (cheader_filename = "fsoframework.h")]
		public const string DeviceServiceFace;
		[CCode (cheader_filename = "fsoframework.h")]
		public const string DeviceServicePath;
		[CCode (cheader_filename = "fsoframework.h")]
		public const string ServiceDBusName;
		[CCode (cheader_filename = "fsoframework.h")]
		public const string ServiceFacePrefix;
		[CCode (cheader_filename = "fsoframework.h")]
		public const string ServicePathPrefix;
	}
	namespace GSM {
		[CCode (cheader_filename = "fsoframework.h")]
		public const string DeviceServiceFace;
		[CCode (cheader_filename = "fsoframework.h")]
		public const string DeviceServicePath;
		[CCode (cheader_filename = "fsoframework.h")]
		public const string ServiceDBusName;
		[CCode (cheader_filename = "fsoframework.h")]
		public const string ServiceFacePrefix;
		[CCode (cheader_filename = "fsoframework.h")]
		public const string ServicePathPrefix;
	}
	namespace Network {
		[CCode (cheader_filename = "fsoframework.h")]
		public const string ServiceDBusName;
		[CCode (cheader_filename = "fsoframework.h")]
		public const string ServiceFacePrefix;
		[CCode (cheader_filename = "fsoframework.h")]
		public const string ServicePathPrefix;
	}
	namespace PIM {
		[CCode (cheader_filename = "fsoframework.h")]
		public const string CallsServiceFace;
		[CCode (cheader_filename = "fsoframework.h")]
		public const string CallsServicePath;
		[CCode (cheader_filename = "fsoframework.h")]
		public const string ContactServiceFace;
		[CCode (cheader_filename = "fsoframework.h")]
		public const string ContactsServiceFace;
		[CCode (cheader_filename = "fsoframework.h")]
		public const string ContactsServicePath;
		[CCode (cheader_filename = "fsoframework.h")]
		public const string MessagesServiceFace;
		[CCode (cheader_filename = "fsoframework.h")]
		public const string MessagesServicePath;
		[CCode (cheader_filename = "fsoframework.h")]
		public const string NotesServiceFace;
		[CCode (cheader_filename = "fsoframework.h")]
		public const string NotesServicePath;
		[CCode (cheader_filename = "fsoframework.h")]
		public const string ServiceDBusName;
		[CCode (cheader_filename = "fsoframework.h")]
		public const string ServiceFacePrefix;
		[CCode (cheader_filename = "fsoframework.h")]
		public const string ServicePathPrefix;
		[CCode (cheader_filename = "fsoframework.h")]
		public const string TasksServiceFace;
		[CCode (cheader_filename = "fsoframework.h")]
		public const string TasksServicePath;
	}
	namespace Phone {
		[CCode (cheader_filename = "fsoframework.h")]
		public const string ClientServiceFace;
		[CCode (cheader_filename = "fsoframework.h")]
		public const string ClientServicePath;
		[CCode (cheader_filename = "fsoframework.h")]
		public const string ManagerServiceFace;
		[CCode (cheader_filename = "fsoframework.h")]
		public const string ManagerServicePath;
		[CCode (cheader_filename = "fsoframework.h")]
		public const string ServiceDBusName;
		[CCode (cheader_filename = "fsoframework.h")]
		public const string ServiceFacePrefix;
		[CCode (cheader_filename = "fsoframework.h")]
		public const string ServicePathPrefix;
	}
	namespace Preferences {
		[CCode (cheader_filename = "fsoframework.h")]
		public const string ServiceDBusName;
		[CCode (cheader_filename = "fsoframework.h")]
		public const string ServiceFacePrefix;
		[CCode (cheader_filename = "fsoframework.h")]
		public const string ServicePathPrefix;
	}
	namespace Resource {
		[CCode (cheader_filename = "fsoframework.h")]
		public const string ServiceDBusName;
		[CCode (cheader_filename = "fsoframework.h")]
		public const string ServiceFacePrefix;
		[CCode (cheader_filename = "fsoframework.h")]
		public const string ServicePathPrefix;
	}
	namespace Time {
		[CCode (cheader_filename = "fsoframework.h")]
		public const string AlarmServiceFace;
		[CCode (cheader_filename = "fsoframework.h")]
		public const string AlarmServicePath;
		[CCode (cheader_filename = "fsoframework.h")]
		public const string LocationServiceFace;
		[CCode (cheader_filename = "fsoframework.h")]
		public const string LocationServicePath;
		[CCode (cheader_filename = "fsoframework.h")]
		public const string ServiceDBusName;
		[CCode (cheader_filename = "fsoframework.h")]
		public const string ServiceFacePrefix;
		[CCode (cheader_filename = "fsoframework.h")]
		public const string ServicePathPrefix;
	}
	namespace Usage {
		[CCode (cheader_filename = "fsoframework.h")]
		public const string ServiceDBusName;
		[CCode (cheader_filename = "fsoframework.h")]
		public const string ServiceFacePrefix;
		[CCode (cheader_filename = "fsoframework.h")]
		public const string ServicePathPrefix;
	}
	[CCode (cheader_filename = "fsoframework.h")]
	public abstract class AbstractSubsystem : FsoFramework.Subsystem, GLib.Object {
		protected FsoFramework.Logger logger;
		public AbstractSubsystem (string name);
		public virtual GLib.Object[] allObjectsWithPrefix (string? prefix = "null");
		public virtual void registerObjectForService<T> (string servicename, string objectpath, T obj);
		public virtual void registerObjectForServiceWithPrefix<T> (string servicename, string prefixpath, T obj);
		public virtual bool registerServiceObjectWithPrefix (string servicename, string prefix, GLib.Object obj);
	}
	[CCode (cheader_filename = "fsoframework.h")]
	public class BasePlugin : FsoFramework.Plugin, GLib.TypeModule {
		public BasePlugin (string filename, FsoFramework.Subsystem subsystem);
		public override bool load ();
		public override void unload ();
	}
	[CCode (cheader_filename = "fsoframework.h")]
	public class BaseSubsystem : FsoFramework.AbstractSubsystem {
		public BaseSubsystem (string name);
	}
	[CCode (cheader_filename = "fsoframework.h")]
	public class DBusExportObject {
		public GLib.Object object;
		public int[] refids;
		public DBusExportObject ();
	}
	[CCode (cheader_filename = "fsoframework.h")]
	public class DBusServiceNotifier : FsoFramework.AbstractObject {
		public DBusServiceNotifier ();
		public void notifyAppearing (string busname, FsoFramework.DBusServiceEventFunc callback);
		public void notifyDisappearing (string busname, FsoFramework.DBusServiceEventFunc callback);
		public override string repr ();
	}
	[CCode (cheader_filename = "fsoframework.h")]
	public class DBusSubsystem : FsoFramework.AbstractSubsystem {
		public DBusSubsystem (string name);
		public override GLib.Object[] allObjectsWithPrefix (string? prefix = null);
		public GLib.DBusConnection dbusConnection ();
		public void exportBusnames ();
		public override void registerObjectForService<T> (string servicename, string objectpath, T obj);
		public override void registerObjectForServiceWithPrefix<T> (string servicename, string prefix, T obj);
	}
	[CCode (cheader_filename = "fsoframework.h")]
	public interface Plugin : GLib.Object {
		public abstract FsoFramework.PluginInfo info ();
		public abstract void loadAndInit () throws FsoFramework.PluginError;
		public abstract void shutdown ();
	}
	[CCode (cheader_filename = "fsoframework.h")]
	public interface Subsystem : GLib.Object {
		public abstract GLib.Object[] allObjectsWithPrefix (string? prefix = null);
		public abstract uint loadPlugins ();
		public abstract string name ();
		public abstract GLib.List<FsoFramework.PluginInfo?> pluginsInfo ();
		public abstract void registerObjectForService<T> (string servicename, string objectpath, T obj);
		public abstract void registerObjectForServiceWithPrefix<T> (string servicename, string prefixpath, T obj);
		public abstract uint registerPlugins ();
		public abstract void shutdown ();
		public signal void serviceNameAcquired (string servicename);
	}
	[CCode (cheader_filename = "fsoframework.h")]
	public struct PluginInfo {
		public string name;
		public bool loaded;
	}
	[CCode (cheader_filename = "fsoframework.h")]
	public enum ResourceStatus {
		UNKNOWN,
		ENABLING,
		ENABLED,
		SUSPENDING,
		SUSPENDED,
		RESUMING,
		DISABLING,
		DISABLED
	}
	[CCode (cheader_filename = "fsoframework.h")]
	public errordomain PluginError {
		UNABLE_TO_LOAD,
		REGISTER_NOT_FOUND,
		FACTORY_NOT_FOUND,
		UNABLE_TO_INITIALIZE
	}
	[CCode (cheader_filename = "fsoframework.h")]
	public delegate void DBusServiceEventFunc (string busname);
	[CCode (cheader_filename = "fsoframework.h", has_target = false)]
	public delegate string FactoryFunc (FsoFramework.Subsystem subsystem) throws GLib.Error;
	[CCode (cheader_filename = "fsoframework.h", has_target = false)]
	public delegate void RegisterFunc (GLib.TypeModule bar);
	[CCode (cheader_filename = "fsoframework.h", has_target = false)]
	public delegate void ShutdownFunc ();
	[CCode (cheader_filename = "fsoframework.h")]
	public const string ServiceDBusPrefix;
	[CCode (cheader_filename = "fsoframework.h")]
	public const string ServiceFacePrefix;
	[CCode (cheader_filename = "fsoframework.h")]
	public const string ServicePathPrefix;
	[CCode (cheader_filename = "fsoframework.h")]
	public static bool isValidDBusName (string busname);
}
namespace DBusService {
	[CCode (cheader_filename = "fsoframework.h")]
	[DBus (name = "org.freedesktop.DBus")]
	public interface IDBus : GLib.Object {
		public abstract async void AddMatch (string match) throws GLib.DBusError, GLib.IOError;
		public abstract async uint8[] GetAdtAuditSessionData (string type) throws GLib.DBusError, GLib.IOError;
		public abstract async uint8[] GetConnectionSELinuxSecurityContext (string type) throws GLib.DBusError, GLib.IOError;
		public abstract async uint32 GetConnectionUnixProcessID (string conn) throws GLib.DBusError, GLib.IOError;
		public abstract async uint32 GetConnectionUnixUser (string conn) throws GLib.DBusError, GLib.IOError;
		public abstract async string GetId () throws GLib.DBusError, GLib.IOError;
		public abstract async string GetNameOwner (string name) throws GLib.DBusError, GLib.IOError;
		public abstract async string Hello () throws GLib.DBusError, GLib.IOError;
		public abstract async string[] ListActivatableNames () throws GLib.DBusError, GLib.IOError;
		public abstract async string[] ListNames () throws GLib.DBusError, GLib.IOError;
		public abstract async string[] ListQueuedOwners (string None) throws GLib.DBusError, GLib.IOError;
		public abstract async bool NameHasOwner (string name) throws GLib.DBusError, GLib.IOError;
		public abstract async uint32 ReleaseName (string name) throws GLib.DBusError, GLib.IOError;
		public abstract async void ReloadConfig () throws GLib.DBusError, GLib.IOError;
		public abstract async void RemoveMatch (string match) throws GLib.DBusError, GLib.IOError;
		public abstract async uint32 RequestName (string name, uint32 flags) throws GLib.DBusError, GLib.IOError;
		public abstract async uint32 StartServiceByName (string name, uint32 flags) throws GLib.DBusError, GLib.IOError;
		public abstract async void UpdateActivationEnvironment (GLib.HashTable<string,string> environment) throws GLib.DBusError, GLib.IOError;
		public signal void NameAcquired (string name);
		public signal void NameLost (string name);
		public signal void NameOwnerChanged (string name, string oldowner, string newowner);
	}
	[CCode (cheader_filename = "fsoframework.h")]
	[DBus (name = "org.freedesktop.DBus")]
	public interface IDBusSync : GLib.Object {
		public abstract void AddMatch (string match) throws GLib.DBusError, GLib.IOError;
		public abstract uint8[] GetAdtAuditSessionData (string type) throws GLib.DBusError, GLib.IOError;
		public abstract uint8[] GetConnectionSELinuxSecurityContext (string type) throws GLib.DBusError, GLib.IOError;
		public abstract uint32 GetConnectionUnixProcessID (string conn) throws GLib.DBusError, GLib.IOError;
		public abstract uint32 GetConnectionUnixUser (string conn) throws GLib.DBusError, GLib.IOError;
		public abstract string GetId () throws GLib.DBusError, GLib.IOError;
		public abstract string GetNameOwner (string name) throws GLib.DBusError, GLib.IOError;
		public abstract string Hello () throws GLib.DBusError, GLib.IOError;
		public abstract string[] ListActivatableNames () throws GLib.DBusError, GLib.IOError;
		public abstract string[] ListNames () throws GLib.DBusError, GLib.IOError;
		public abstract string[] ListQueuedOwners (string None) throws GLib.DBusError, GLib.IOError;
		public abstract bool NameHasOwner (string name) throws GLib.DBusError, GLib.IOError;
		public abstract uint32 ReleaseName (string name) throws GLib.DBusError, GLib.IOError;
		public abstract void ReloadConfig () throws GLib.DBusError, GLib.IOError;
		public abstract void RemoveMatch (string match) throws GLib.DBusError, GLib.IOError;
		public abstract uint32 RequestName (string name, uint32 flags) throws GLib.DBusError, GLib.IOError;
		public abstract uint32 StartServiceByName (string name, uint32 flags) throws GLib.DBusError, GLib.IOError;
		public abstract void UpdateActivationEnvironment (GLib.HashTable<string,string> environment) throws GLib.DBusError, GLib.IOError;
		public signal void NameAcquired (string name);
		public signal void NameLost (string name);
		public signal void NameOwnerChanged (string name, string oldowner, string newowner);
	}
	[CCode (cheader_filename = "fsoframework.h")]
	[DBus (name = "org.freedesktop.DBus.Introspectable")]
	public interface IIntrospectable : GLib.Object {
		public abstract async string Introspect () throws GLib.DBusError, GLib.IOError;
	}
	[CCode (cheader_filename = "fsoframework.h")]
	[DBus (name = "org.freedesktop.DBus.Peer")]
	public interface IPeer : GLib.Object {
		public abstract async void Ping () throws GLib.DBusError, GLib.IOError;
	}
	[CCode (cheader_filename = "fsoframework.h")]
	[DBus (name = "org.freedesktop.DBus.Properties")]
	public interface IProperties : GLib.Object {
		public abstract async GLib.Variant Get (string iface, string prop) throws GLib.DBusError, GLib.IOError;
		public abstract async GLib.HashTable<string,GLib.Variant> GetAll (string iface) throws GLib.DBusError, GLib.IOError;
		public abstract async void Set (string iface, string prop, GLib.Variant val) throws GLib.DBusError, GLib.IOError;
	}
	[CCode (cheader_filename = "fsoframework.h")]
	public const string DBUS_INTERFACE_DBUS;
	[CCode (cheader_filename = "fsoframework.h")]
	public const string DBUS_INTERFACE_INTROSPECTABLE;
	[CCode (cheader_filename = "fsoframework.h")]
	public const string DBUS_INTERFACE_PEER;
	[CCode (cheader_filename = "fsoframework.h")]
	public const string DBUS_INTERFACE_PROPERTIES;
	[CCode (cheader_filename = "fsoframework.h")]
	public const string DBUS_PATH_DBUS;
	[CCode (cheader_filename = "fsoframework.h")]
	public const string DBUS_SERVICE_DBUS;
}
